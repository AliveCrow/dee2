/*
 * XgeneCloud
 * Create APIs at the speed of your thoughts
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CofAuthTemplate'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CofAuthTemplate'));
  } else {
    // Browser globals (root is window)
    if (!root.XgeneCloud) {
      root.XgeneCloud = {};
    }
    root.XgeneCloud.CofAuthTemplateApi = factory(root.XgeneCloud.ApiClient, root.XgeneCloud.CofAuthTemplate);
  }
}(this, function(ApiClient, CofAuthTemplate) {
  'use strict';

  /**
   * CofAuthTemplate service.
   * @module api/CofAuthTemplateApi
   * @version 1.0.0
   */

  /**
   * Constructs a new CofAuthTemplateApi. 
   * @alias module:api/CofAuthTemplateApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addcofAuthTemplate operation.
     * @callback module:api/CofAuthTemplateApi~addcofAuthTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new cof_auth_template
     * 
     * @param {module:model/CofAuthTemplate} body cof_auth_template object that needs to add
     * @param {module:api/CofAuthTemplateApi~addcofAuthTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addcofAuthTemplate = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addcofAuthTemplate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/cof_auth_template', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkcofAuthTemplateInsert operation.
     * @callback module:api/CofAuthTemplateApi~bulkcofAuthTemplateInsertCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk cof_auth_template insert
     * 
     * @param {Array.<module:model/CofAuthTemplate>} body cof_auth_template objects
     * @param {module:api/CofAuthTemplateApi~bulkcofAuthTemplateInsertCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bulkcofAuthTemplateInsert = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bulkcofAuthTemplateInsert");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/cof_auth_template/bulk', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the checkcofAuthTemplateExists operation.
     * @callback module:api/CofAuthTemplateApi~checkcofAuthTemplateExistsCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check cof_auth_template with provided ID exists
     * Returns a single cof_auth_template
     * @param {Number} cofAuthTemplateId ID of cof_auth_template
     * @param {module:api/CofAuthTemplateApi~checkcofAuthTemplateExistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.checkcofAuthTemplateExists = function(cofAuthTemplateId, callback) {
      var postBody = null;

      // verify the required parameter 'cofAuthTemplateId' is set
      if (cofAuthTemplateId === undefined || cofAuthTemplateId === null) {
        throw new Error("Missing the required parameter 'cofAuthTemplateId' when calling checkcofAuthTemplateExists");
      }


      var pathParams = {
        'cof_auth_templateId': cofAuthTemplateId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/api/v1/cof_auth_template/{cof_auth_templateId}/exists', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cofAuthTemplateAggregate operation.
     * @callback module:api/CofAuthTemplateApi~cofAuthTemplateAggregateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CofAuthTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get first one from filtered data
     * 
     * @param {Object} columnName Column name
     * @param {Object} fields Column name
     * @param {Object} func Comma seperated aggregate functions
     * @param {Object} opts Optional parameters
     * @param {Object} opts.having Having expression
     * @param {Object} opts.fields2 Comma seperated fields from the model
     * @param {Number} opts.limit Page size limit
     * @param {Number} opts.offset Pagination offset
     * @param {String} opts.sort Comma seperated sort fields
     * @param {module:api/CofAuthTemplateApi~cofAuthTemplateAggregateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CofAuthTemplate}
     */
    this.cofAuthTemplateAggregate = function(columnName, fields, func, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'columnName' is set
      if (columnName === undefined || columnName === null) {
        throw new Error("Missing the required parameter 'columnName' when calling cofAuthTemplateAggregate");
      }

      // verify the required parameter 'fields' is set
      if (fields === undefined || fields === null) {
        throw new Error("Missing the required parameter 'fields' when calling cofAuthTemplateAggregate");
      }

      // verify the required parameter 'func' is set
      if (func === undefined || func === null) {
        throw new Error("Missing the required parameter 'func' when calling cofAuthTemplateAggregate");
      }


      var pathParams = {
        'columnName': columnName,
        'fields': fields,
        'func': func
      };
      var queryParams = {
        'having': opts['having'],
        'fields': opts['fields2'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CofAuthTemplate;

      return this.apiClient.callApi(
        '/api/v1/cof_auth_template/aggregate/{columnName}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cofAuthTemplateDistinct operation.
     * @callback module:api/CofAuthTemplateApi~cofAuthTemplateDistinctCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get first one from filtered data
     * 
     * @param {Object} columnName Column name
     * @param {Object} opts Optional parameters
     * @param {Object} opts.where Where expression
     * @param {Number} opts.limit Page size limit
     * @param {Number} opts.offset Pagination offset
     * @param {String} opts.sort Comma seperated sort fieldst
     * @param {module:api/CofAuthTemplateApi~cofAuthTemplateDistinctCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    this.cofAuthTemplateDistinct = function(columnName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'columnName' is set
      if (columnName === undefined || columnName === null) {
        throw new Error("Missing the required parameter 'columnName' when calling cofAuthTemplateDistinct");
      }


      var pathParams = {
        'columnName': columnName
      };
      var queryParams = {
        'where': opts['where'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Object];

      return this.apiClient.callApi(
        '/api/v1/cof_auth_template/distinct/{columnName}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cofAuthTemplateDistribution operation.
     * @callback module:api/CofAuthTemplateApi~cofAuthTemplateDistributionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * 
     * @param {Object} columnName Column name
     * @param {Object} opts Optional parameters
     * @param {Number} opts.min min value
     * @param {Number} opts.max max value
     * @param {Number} opts.step step value
     * @param {Number} opts.steps steps value
     * @param {String} opts.func comma separated aggregation functions
     * @param {module:api/CofAuthTemplateApi~cofAuthTemplateDistributionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    this.cofAuthTemplateDistribution = function(columnName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'columnName' is set
      if (columnName === undefined || columnName === null) {
        throw new Error("Missing the required parameter 'columnName' when calling cofAuthTemplateDistribution");
      }


      var pathParams = {
        'columnName': columnName
      };
      var queryParams = {
        'min': opts['min'],
        'max': opts['max'],
        'step': opts['step'],
        'steps': opts['steps'],
        'func': opts['func'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Object];

      return this.apiClient.callApi(
        '/api/v1/cof_auth_template/distribution/{columnName}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cofAuthTemplateGroupByColumn operation.
     * @callback module:api/CofAuthTemplateApi~cofAuthTemplateGroupByColumnCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CofAuthTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Group by column
     * 
     * @param {Object} columnName Column name
     * @param {Object} opts Optional parameters
     * @param {Object} opts.where Where expression
     * @param {Number} opts.limit Page size limit
     * @param {Number} opts.offset Pagination offset
     * @param {String} opts.sort Comma seperated sort fieldst
     * @param {module:api/CofAuthTemplateApi~cofAuthTemplateGroupByColumnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CofAuthTemplate}
     */
    this.cofAuthTemplateGroupByColumn = function(columnName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'columnName' is set
      if (columnName === undefined || columnName === null) {
        throw new Error("Missing the required parameter 'columnName' when calling cofAuthTemplateGroupByColumn");
      }


      var pathParams = {
        'columnName': columnName
      };
      var queryParams = {
        'where': opts['where'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CofAuthTemplate;

      return this.apiClient.callApi(
        '/api/v1/cof_auth_template/groupby/{columnName}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletecofAuthTemplate operation.
     * @callback module:api/CofAuthTemplateApi~deletecofAuthTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a cof_auth_template
     * 
     * @param {Number} cofAuthTemplateId ID of cof_auth_template to return
     * @param {module:api/CofAuthTemplateApi~deletecofAuthTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletecofAuthTemplate = function(cofAuthTemplateId, callback) {
      var postBody = null;

      // verify the required parameter 'cofAuthTemplateId' is set
      if (cofAuthTemplateId === undefined || cofAuthTemplateId === null) {
        throw new Error("Missing the required parameter 'cofAuthTemplateId' when calling deletecofAuthTemplate");
      }


      var pathParams = {
        'cof_auth_templateId': cofAuthTemplateId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/cof_auth_template/{cof_auth_templateId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletecofAuthTemplate_0 operation.
     * @callback module:api/CofAuthTemplateApi~deletecofAuthTemplate_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a cof_auth_template
     * 
     * @param {Array.<module:model/CofAuthTemplate>} body cof_auth_template objects contains id
     * @param {module:api/CofAuthTemplateApi~deletecofAuthTemplate_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletecofAuthTemplate_0 = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deletecofAuthTemplate_0");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/cof_auth_template/bulk', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findOnecofAuthTemplate operation.
     * @callback module:api/CofAuthTemplateApi~findOnecofAuthTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CofAuthTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get first one from filtered data
     * 
     * @param {Object} opts Optional parameters
     * @param {Object} opts.fields Comma seperated fields from the model
     * @param {Object} opts.where Where expression
     * @param {Number} opts.limit Page size limit
     * @param {Number} opts.offset Pagination offset
     * @param {String} opts.sort Comma seperated sort fieldst
     * @param {module:api/CofAuthTemplateApi~findOnecofAuthTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CofAuthTemplate}
     */
    this.findOnecofAuthTemplate = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': opts['fields'],
        'where': opts['where'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CofAuthTemplate;

      return this.apiClient.callApi(
        '/api/v1/cof_auth_template/findOne', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getcofAuthTemplate operation.
     * @callback module:api/CofAuthTemplateApi~getcofAuthTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list
     * 
     * @param {Object} opts Optional parameters
     * @param {Object} opts.fields Comma seperated fields from the model
     * @param {Object} opts.where Where expression
     * @param {Number} opts.limit Page size limit
     * @param {Number} opts.offset Pagination offset
     * @param {String} opts.sort Comma seperated sort fields
     * @param {module:api/CofAuthTemplateApi~getcofAuthTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getcofAuthTemplate = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': opts['fields'],
        'where': opts['where'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/cof_auth_template', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getcofAuthTemplateById operation.
     * @callback module:api/CofAuthTemplateApi~getcofAuthTemplateByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CofAuthTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find cof_auth_template by ID
     * Returns a single cof_auth_template
     * @param {Number} cofAuthTemplateId ID of cof_auth_template to return
     * @param {module:api/CofAuthTemplateApi~getcofAuthTemplateByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CofAuthTemplate}
     */
    this.getcofAuthTemplateById = function(cofAuthTemplateId, callback) {
      var postBody = null;

      // verify the required parameter 'cofAuthTemplateId' is set
      if (cofAuthTemplateId === undefined || cofAuthTemplateId === null) {
        throw new Error("Missing the required parameter 'cofAuthTemplateId' when calling getcofAuthTemplateById");
      }


      var pathParams = {
        'cof_auth_templateId': cofAuthTemplateId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CofAuthTemplate;

      return this.apiClient.callApi(
        '/api/v1/cof_auth_template/{cof_auth_templateId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getcofAuthTemplateCount operation.
     * @callback module:api/CofAuthTemplateApi~getcofAuthTemplateCountCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get cof_auth_template count
     * @param {Object} opts Optional parameters
     * @param {Object} opts.where Where expression
     * @param {module:api/CofAuthTemplateApi~getcofAuthTemplateCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getcofAuthTemplateCount = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'where': opts['where'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/cof_auth_template/count', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatecofAuthTemplate operation.
     * @callback module:api/CofAuthTemplateApi~updatecofAuthTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a cof_auth_template
     * 
     * @param {Number} cofAuthTemplateId ID of cof_auth_template to return
     * @param {module:model/CofAuthTemplate} body cof_auth_template object that needs to be added to the store
     * @param {module:api/CofAuthTemplateApi~updatecofAuthTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updatecofAuthTemplate = function(cofAuthTemplateId, body, callback) {
      var postBody = body;

      // verify the required parameter 'cofAuthTemplateId' is set
      if (cofAuthTemplateId === undefined || cofAuthTemplateId === null) {
        throw new Error("Missing the required parameter 'cofAuthTemplateId' when calling updatecofAuthTemplate");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatecofAuthTemplate");
      }


      var pathParams = {
        'cof_auth_templateId': cofAuthTemplateId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/cof_auth_template/{cof_auth_templateId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatecofAuthTemplate_0 operation.
     * @callback module:api/CofAuthTemplateApi~updatecofAuthTemplate_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a cof_auth_template
     * 
     * @param {Array.<module:model/CofAuthTemplate>} body cof_auth_template objects with id
     * @param {module:api/CofAuthTemplateApi~updatecofAuthTemplate_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updatecofAuthTemplate_0 = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatecofAuthTemplate_0");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/cof_auth_template/bulk', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
