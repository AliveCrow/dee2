/*
 * XgeneCloud
 * Create APIs at the speed of your thoughts
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.XgeneCloud);
  }
}(this, function(expect, XgeneCloud) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('CofEmp', function() {
      beforeEach(function() {
        instance = new XgeneCloud.CofEmp();
      });

      it('should create an instance of CofEmp', function() {
        // TODO: update the code to test CofEmp
        expect(instance).to.be.a(XgeneCloud.CofEmp);
      });

      it('should have the property ID (base name: "ID")', function() {
        // TODO: update the code to test the property ID
        expect(instance).to.have.property('ID');
        // expect(instance.ID).to.be(expectedValueLiteral);
      });

      it('should have the property CODE (base name: "CODE")', function() {
        // TODO: update the code to test the property CODE
        expect(instance).to.have.property('CODE');
        // expect(instance.CODE).to.be(expectedValueLiteral);
      });

      it('should have the property NAME (base name: "NAME")', function() {
        // TODO: update the code to test the property NAME
        expect(instance).to.have.property('NAME');
        // expect(instance.NAME).to.be(expectedValueLiteral);
      });

      it('should have the property REALNAME (base name: "REALNAME")', function() {
        // TODO: update the code to test the property REALNAME
        expect(instance).to.have.property('REALNAME');
        // expect(instance.REALNAME).to.be(expectedValueLiteral);
      });

      it('should have the property GENDER (base name: "GENDER")', function() {
        // TODO: update the code to test the property GENDER
        expect(instance).to.have.property('GENDER');
        // expect(instance.GENDER).to.be(expectedValueLiteral);
      });

      it('should have the property BIRTHDAY (base name: "BIRTHDAY")', function() {
        // TODO: update the code to test the property BIRTHDAY
        expect(instance).to.have.property('BIRTHDAY');
        // expect(instance.BIRTHDAY).to.be(expectedValueLiteral);
      });

      it('should have the property STATUS (base name: "STATUS")', function() {
        // TODO: update the code to test the property STATUS
        expect(instance).to.have.property('STATUS');
        // expect(instance.STATUS).to.be(expectedValueLiteral);
      });

      it('should have the property CARD_TYPE (base name: "CARD_TYPE")', function() {
        // TODO: update the code to test the property CARD_TYPE
        expect(instance).to.have.property('CARD_TYPE');
        // expect(instance.CARD_TYPE).to.be(expectedValueLiteral);
      });

      it('should have the property CARD_NO (base name: "CARD_NO")', function() {
        // TODO: update the code to test the property CARD_NO
        expect(instance).to.have.property('CARD_NO');
        // expect(instance.CARD_NO).to.be(expectedValueLiteral);
      });

      it('should have the property IN_DATE (base name: "IN_DATE")', function() {
        // TODO: update the code to test the property IN_DATE
        expect(instance).to.have.property('IN_DATE');
        // expect(instance.IN_DATE).to.be(expectedValueLiteral);
      });

      it('should have the property OUT_DATE (base name: "OUT_DATE")', function() {
        // TODO: update the code to test the property OUT_DATE
        expect(instance).to.have.property('OUT_DATE');
        // expect(instance.OUT_DATE).to.be(expectedValueLiteral);
      });

      it('should have the property FAN_NO (base name: "FAN_NO")', function() {
        // TODO: update the code to test the property FAN_NO
        expect(instance).to.have.property('FAN_NO');
        // expect(instance.FAN_NO).to.be(expectedValueLiteral);
      });

      it('should have the property MOBILE_NO (base name: "MOBILE_NO")', function() {
        // TODO: update the code to test the property MOBILE_NO
        expect(instance).to.have.property('MOBILE_NO');
        // expect(instance.MOBILE_NO).to.be(expectedValueLiteral);
      });

      it('should have the property DESCRIPTION (base name: "DESCRIPTION")', function() {
        // TODO: update the code to test the property DESCRIPTION
        expect(instance).to.have.property('DESCRIPTION');
        // expect(instance.DESCRIPTION).to.be(expectedValueLiteral);
      });

      it('should have the property CREATE_TIME (base name: "CREATE_TIME")', function() {
        // TODO: update the code to test the property CREATE_TIME
        expect(instance).to.have.property('CREATE_TIME');
        // expect(instance.CREATE_TIME).to.be(expectedValueLiteral);
      });

      it('should have the property UPDATE_TIME (base name: "UPDATE_TIME")', function() {
        // TODO: update the code to test the property UPDATE_TIME
        expect(instance).to.have.property('UPDATE_TIME');
        // expect(instance.UPDATE_TIME).to.be(expectedValueLiteral);
      });

      it('should have the property TENANT_ID (base name: "TENANT_ID")', function() {
        // TODO: update the code to test the property TENANT_ID
        expect(instance).to.have.property('TENANT_ID');
        // expect(instance.TENANT_ID).to.be(expectedValueLiteral);
      });

      it('should have the property PARTY (base name: "PARTY")', function() {
        // TODO: update the code to test the property PARTY
        expect(instance).to.have.property('PARTY');
        // expect(instance.PARTY).to.be(expectedValueLiteral);
      });

      it('should have the property DEGREE (base name: "DEGREE")', function() {
        // TODO: update the code to test the property DEGREE
        expect(instance).to.have.property('DEGREE');
        // expect(instance.DEGREE).to.be(expectedValueLiteral);
      });

      it('should have the property REMARK (base name: "REMARK")', function() {
        // TODO: update the code to test the property REMARK
        expect(instance).to.have.property('REMARK');
        // expect(instance.REMARK).to.be(expectedValueLiteral);
      });

      it('should have the property O_TEL (base name: "O_TEL")', function() {
        // TODO: update the code to test the property O_TEL
        expect(instance).to.have.property('O_TEL');
        // expect(instance.O_TEL).to.be(expectedValueLiteral);
      });

      it('should have the property O_ADDRESS (base name: "O_ADDRESS")', function() {
        // TODO: update the code to test the property O_ADDRESS
        expect(instance).to.have.property('O_ADDRESS');
        // expect(instance.O_ADDRESS).to.be(expectedValueLiteral);
      });

      it('should have the property O_EMAIL (base name: "O_EMAIL")', function() {
        // TODO: update the code to test the property O_EMAIL
        expect(instance).to.have.property('O_EMAIL');
        // expect(instance.O_EMAIL).to.be(expectedValueLiteral);
      });

      it('should have the property H_TEL (base name: "H_TEL")', function() {
        // TODO: update the code to test the property H_TEL
        expect(instance).to.have.property('H_TEL');
        // expect(instance.H_TEL).to.be(expectedValueLiteral);
      });

      it('should have the property H_ADDRESS (base name: "H_ADDRESS")', function() {
        // TODO: update the code to test the property H_ADDRESS
        expect(instance).to.have.property('H_ADDRESS');
        // expect(instance.H_ADDRESS).to.be(expectedValueLiteral);
      });

      it('should have the property H_ZIPCODE (base name: "H_ZIPCODE")', function() {
        // TODO: update the code to test the property H_ZIPCODE
        expect(instance).to.have.property('H_ZIPCODE');
        // expect(instance.H_ZIPCODE).to.be(expectedValueLiteral);
      });

      it('should have the property P_EMAIL (base name: "P_EMAIL")', function() {
        // TODO: update the code to test the property P_EMAIL
        expect(instance).to.have.property('P_EMAIL');
        // expect(instance.P_EMAIL).to.be(expectedValueLiteral);
      });

      it('should have the property QQ (base name: "QQ")', function() {
        // TODO: update the code to test the property QQ
        expect(instance).to.have.property('QQ');
        // expect(instance.QQ).to.be(expectedValueLiteral);
      });

      it('should have the property WEIBO (base name: "WEIBO")', function() {
        // TODO: update the code to test the property WEIBO
        expect(instance).to.have.property('WEIBO');
        // expect(instance.WEIBO).to.be(expectedValueLiteral);
      });

      it('should have the property WECHAT (base name: "WECHAT")', function() {
        // TODO: update the code to test the property WECHAT
        expect(instance).to.have.property('WECHAT');
        // expect(instance.WECHAT).to.be(expectedValueLiteral);
      });

      it('should have the property IS_FIXED (base name: "IS_FIXED")', function() {
        // TODO: update the code to test the property IS_FIXED
        expect(instance).to.have.property('IS_FIXED');
        // expect(instance.IS_FIXED).to.be(expectedValueLiteral);
      });

    });
  });

}));
