/*
 * XgeneCloud
 * Create APIs at the speed of your thoughts
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.XgeneCloud);
  }
}(this, function(expect, XgeneCloud) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new XgeneCloud.CofEmpApi();
  });

  describe('(package)', function() {
    describe('CofEmpApi', function() {
      describe('addcofEmp', function() {
        it('should call addcofEmp successfully', function(done) {
          // TODO: uncomment, update parameter values for addcofEmp call
          /*
          var body = new XgeneCloud.CofEmp();
          body.ID = "";
          body.CODE = "";
          body.NAME = "";
          body.REALNAME = "";
          body.GENDER = "";
          body.BIRTHDAY = "";
          body.STATUS = "";
          body.CARD_TYPE = "";
          body.CARD_NO = "";
          body.IN_DATE = "";
          body.OUT_DATE = "";
          body.FAN_NO = "";
          body.MOBILE_NO = "";
          body.DESCRIPTION = "";
          body.CREATE_TIME = "";
          body.UPDATE_TIME = "";
          body.TENANT_ID = "";
          body.PARTY = "";
          body.DEGREE = "";
          body.REMARK = "";
          body.O_TEL = "";
          body.O_ADDRESS = "";
          body.O_EMAIL = "";
          body.H_TEL = "";
          body.H_ADDRESS = "";
          body.H_ZIPCODE = "";
          body.P_EMAIL = "";
          body.QQ = "";
          body.WEIBO = "";
          body.WECHAT = "";
          body.IS_FIXED = 0;

          instance.addcofEmp(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkcofEmpInsert', function() {
        it('should call bulkcofEmpInsert successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkcofEmpInsert call
          /*
          var body = [new XgeneCloud.CofEmp()];
          body[0].ID = "";
          body[0].CODE = "";
          body[0].NAME = "";
          body[0].REALNAME = "";
          body[0].GENDER = "";
          body[0].BIRTHDAY = "";
          body[0].STATUS = "";
          body[0].CARD_TYPE = "";
          body[0].CARD_NO = "";
          body[0].IN_DATE = "";
          body[0].OUT_DATE = "";
          body[0].FAN_NO = "";
          body[0].MOBILE_NO = "";
          body[0].DESCRIPTION = "";
          body[0].CREATE_TIME = "";
          body[0].UPDATE_TIME = "";
          body[0].TENANT_ID = "";
          body[0].PARTY = "";
          body[0].DEGREE = "";
          body[0].REMARK = "";
          body[0].O_TEL = "";
          body[0].O_ADDRESS = "";
          body[0].O_EMAIL = "";
          body[0].H_TEL = "";
          body[0].H_ADDRESS = "";
          body[0].H_ZIPCODE = "";
          body[0].P_EMAIL = "";
          body[0].QQ = "";
          body[0].WEIBO = "";
          body[0].WECHAT = "";
          body[0].IS_FIXED = 0;

          instance.bulkcofEmpInsert(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('checkcofEmpExists', function() {
        it('should call checkcofEmpExists successfully', function(done) {
          // TODO: uncomment, update parameter values for checkcofEmpExists call and complete the assertions
          /*
          var cofEmpId = 789;

          instance.checkcofEmpExists(cofEmpId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('boolean');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofEmpAggregate', function() {
        it('should call cofEmpAggregate successfully', function(done) {
          // TODO: uncomment, update parameter values for cofEmpAggregate call and complete the assertions
          /*
          var columnName = null;
          var fields = null;
          var func = null;
          var opts = {};
          opts.having = null;
          opts.fields2 = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofEmpAggregate(columnName, fields, func, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofEmp);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.CODE).to.be.a('string');
            expect(data.CODE).to.be("");
            expect(data.NAME).to.be.a('string');
            expect(data.NAME).to.be("");
            expect(data.REALNAME).to.be.a('string');
            expect(data.REALNAME).to.be("");
            expect(data.GENDER).to.be.a('string');
            expect(data.GENDER).to.be("");
            expect(data.BIRTHDAY).to.be.a('string');
            expect(data.BIRTHDAY).to.be("");
            expect(data.STATUS).to.be.a('string');
            expect(data.STATUS).to.be("");
            expect(data.CARD_TYPE).to.be.a('string');
            expect(data.CARD_TYPE).to.be("");
            expect(data.CARD_NO).to.be.a('string');
            expect(data.CARD_NO).to.be("");
            expect(data.IN_DATE).to.be.a('string');
            expect(data.IN_DATE).to.be("");
            expect(data.OUT_DATE).to.be.a('string');
            expect(data.OUT_DATE).to.be("");
            expect(data.FAN_NO).to.be.a('string');
            expect(data.FAN_NO).to.be("");
            expect(data.MOBILE_NO).to.be.a('string');
            expect(data.MOBILE_NO).to.be("");
            expect(data.DESCRIPTION).to.be.a('string');
            expect(data.DESCRIPTION).to.be("");
            expect(data.CREATE_TIME).to.be.a('string');
            expect(data.CREATE_TIME).to.be("");
            expect(data.UPDATE_TIME).to.be.a('string');
            expect(data.UPDATE_TIME).to.be("");
            expect(data.TENANT_ID).to.be.a('string');
            expect(data.TENANT_ID).to.be("");
            expect(data.PARTY).to.be.a('string');
            expect(data.PARTY).to.be("");
            expect(data.DEGREE).to.be.a('string');
            expect(data.DEGREE).to.be("");
            expect(data.REMARK).to.be.a('string');
            expect(data.REMARK).to.be("");
            expect(data.O_TEL).to.be.a('string');
            expect(data.O_TEL).to.be("");
            expect(data.O_ADDRESS).to.be.a('string');
            expect(data.O_ADDRESS).to.be("");
            expect(data.O_EMAIL).to.be.a('string');
            expect(data.O_EMAIL).to.be("");
            expect(data.H_TEL).to.be.a('string');
            expect(data.H_TEL).to.be("");
            expect(data.H_ADDRESS).to.be.a('string');
            expect(data.H_ADDRESS).to.be("");
            expect(data.H_ZIPCODE).to.be.a('string');
            expect(data.H_ZIPCODE).to.be("");
            expect(data.P_EMAIL).to.be.a('string');
            expect(data.P_EMAIL).to.be("");
            expect(data.QQ).to.be.a('string');
            expect(data.QQ).to.be("");
            expect(data.WEIBO).to.be.a('string');
            expect(data.WEIBO).to.be("");
            expect(data.WECHAT).to.be.a('string');
            expect(data.WECHAT).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofEmpDistinct', function() {
        it('should call cofEmpDistinct successfully', function(done) {
          // TODO: uncomment, update parameter values for cofEmpDistinct call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofEmpDistinct(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofEmpDistribution', function() {
        it('should call cofEmpDistribution successfully', function(done) {
          // TODO: uncomment, update parameter values for cofEmpDistribution call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.min = 789;
          opts.max = 789;
          opts.step = 789;
          opts.steps = 789;
          opts.func = "func_example";

          instance.cofEmpDistribution(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofEmpGroupByColumn', function() {
        it('should call cofEmpGroupByColumn successfully', function(done) {
          // TODO: uncomment, update parameter values for cofEmpGroupByColumn call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofEmpGroupByColumn(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofEmp);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.CODE).to.be.a('string');
            expect(data.CODE).to.be("");
            expect(data.NAME).to.be.a('string');
            expect(data.NAME).to.be("");
            expect(data.REALNAME).to.be.a('string');
            expect(data.REALNAME).to.be("");
            expect(data.GENDER).to.be.a('string');
            expect(data.GENDER).to.be("");
            expect(data.BIRTHDAY).to.be.a('string');
            expect(data.BIRTHDAY).to.be("");
            expect(data.STATUS).to.be.a('string');
            expect(data.STATUS).to.be("");
            expect(data.CARD_TYPE).to.be.a('string');
            expect(data.CARD_TYPE).to.be("");
            expect(data.CARD_NO).to.be.a('string');
            expect(data.CARD_NO).to.be("");
            expect(data.IN_DATE).to.be.a('string');
            expect(data.IN_DATE).to.be("");
            expect(data.OUT_DATE).to.be.a('string');
            expect(data.OUT_DATE).to.be("");
            expect(data.FAN_NO).to.be.a('string');
            expect(data.FAN_NO).to.be("");
            expect(data.MOBILE_NO).to.be.a('string');
            expect(data.MOBILE_NO).to.be("");
            expect(data.DESCRIPTION).to.be.a('string');
            expect(data.DESCRIPTION).to.be("");
            expect(data.CREATE_TIME).to.be.a('string');
            expect(data.CREATE_TIME).to.be("");
            expect(data.UPDATE_TIME).to.be.a('string');
            expect(data.UPDATE_TIME).to.be("");
            expect(data.TENANT_ID).to.be.a('string');
            expect(data.TENANT_ID).to.be("");
            expect(data.PARTY).to.be.a('string');
            expect(data.PARTY).to.be("");
            expect(data.DEGREE).to.be.a('string');
            expect(data.DEGREE).to.be("");
            expect(data.REMARK).to.be.a('string');
            expect(data.REMARK).to.be("");
            expect(data.O_TEL).to.be.a('string');
            expect(data.O_TEL).to.be("");
            expect(data.O_ADDRESS).to.be.a('string');
            expect(data.O_ADDRESS).to.be("");
            expect(data.O_EMAIL).to.be.a('string');
            expect(data.O_EMAIL).to.be("");
            expect(data.H_TEL).to.be.a('string');
            expect(data.H_TEL).to.be("");
            expect(data.H_ADDRESS).to.be.a('string');
            expect(data.H_ADDRESS).to.be("");
            expect(data.H_ZIPCODE).to.be.a('string');
            expect(data.H_ZIPCODE).to.be("");
            expect(data.P_EMAIL).to.be.a('string');
            expect(data.P_EMAIL).to.be("");
            expect(data.QQ).to.be.a('string');
            expect(data.QQ).to.be("");
            expect(data.WEIBO).to.be.a('string');
            expect(data.WEIBO).to.be("");
            expect(data.WECHAT).to.be.a('string');
            expect(data.WECHAT).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletecofEmp', function() {
        it('should call deletecofEmp successfully', function(done) {
          // TODO: uncomment, update parameter values for deletecofEmp call
          /*
          var cofEmpId = 789;

          instance.deletecofEmp(cofEmpId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletecofEmp_0', function() {
        it('should call deletecofEmp_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for deletecofEmp_0 call
          /*
          var body = [new XgeneCloud.CofEmp()];
          body[0].ID = "";
          body[0].CODE = "";
          body[0].NAME = "";
          body[0].REALNAME = "";
          body[0].GENDER = "";
          body[0].BIRTHDAY = "";
          body[0].STATUS = "";
          body[0].CARD_TYPE = "";
          body[0].CARD_NO = "";
          body[0].IN_DATE = "";
          body[0].OUT_DATE = "";
          body[0].FAN_NO = "";
          body[0].MOBILE_NO = "";
          body[0].DESCRIPTION = "";
          body[0].CREATE_TIME = "";
          body[0].UPDATE_TIME = "";
          body[0].TENANT_ID = "";
          body[0].PARTY = "";
          body[0].DEGREE = "";
          body[0].REMARK = "";
          body[0].O_TEL = "";
          body[0].O_ADDRESS = "";
          body[0].O_EMAIL = "";
          body[0].H_TEL = "";
          body[0].H_ADDRESS = "";
          body[0].H_ZIPCODE = "";
          body[0].P_EMAIL = "";
          body[0].QQ = "";
          body[0].WEIBO = "";
          body[0].WECHAT = "";
          body[0].IS_FIXED = 0;

          instance.deletecofEmp_0(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findOnecofEmp', function() {
        it('should call findOnecofEmp successfully', function(done) {
          // TODO: uncomment, update parameter values for findOnecofEmp call and complete the assertions
          /*
          var opts = {};
          opts.fields = null;
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.findOnecofEmp(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofEmp);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.CODE).to.be.a('string');
            expect(data.CODE).to.be("");
            expect(data.NAME).to.be.a('string');
            expect(data.NAME).to.be("");
            expect(data.REALNAME).to.be.a('string');
            expect(data.REALNAME).to.be("");
            expect(data.GENDER).to.be.a('string');
            expect(data.GENDER).to.be("");
            expect(data.BIRTHDAY).to.be.a('string');
            expect(data.BIRTHDAY).to.be("");
            expect(data.STATUS).to.be.a('string');
            expect(data.STATUS).to.be("");
            expect(data.CARD_TYPE).to.be.a('string');
            expect(data.CARD_TYPE).to.be("");
            expect(data.CARD_NO).to.be.a('string');
            expect(data.CARD_NO).to.be("");
            expect(data.IN_DATE).to.be.a('string');
            expect(data.IN_DATE).to.be("");
            expect(data.OUT_DATE).to.be.a('string');
            expect(data.OUT_DATE).to.be("");
            expect(data.FAN_NO).to.be.a('string');
            expect(data.FAN_NO).to.be("");
            expect(data.MOBILE_NO).to.be.a('string');
            expect(data.MOBILE_NO).to.be("");
            expect(data.DESCRIPTION).to.be.a('string');
            expect(data.DESCRIPTION).to.be("");
            expect(data.CREATE_TIME).to.be.a('string');
            expect(data.CREATE_TIME).to.be("");
            expect(data.UPDATE_TIME).to.be.a('string');
            expect(data.UPDATE_TIME).to.be("");
            expect(data.TENANT_ID).to.be.a('string');
            expect(data.TENANT_ID).to.be("");
            expect(data.PARTY).to.be.a('string');
            expect(data.PARTY).to.be("");
            expect(data.DEGREE).to.be.a('string');
            expect(data.DEGREE).to.be("");
            expect(data.REMARK).to.be.a('string');
            expect(data.REMARK).to.be("");
            expect(data.O_TEL).to.be.a('string');
            expect(data.O_TEL).to.be("");
            expect(data.O_ADDRESS).to.be.a('string');
            expect(data.O_ADDRESS).to.be("");
            expect(data.O_EMAIL).to.be.a('string');
            expect(data.O_EMAIL).to.be("");
            expect(data.H_TEL).to.be.a('string');
            expect(data.H_TEL).to.be("");
            expect(data.H_ADDRESS).to.be.a('string');
            expect(data.H_ADDRESS).to.be("");
            expect(data.H_ZIPCODE).to.be.a('string');
            expect(data.H_ZIPCODE).to.be("");
            expect(data.P_EMAIL).to.be.a('string');
            expect(data.P_EMAIL).to.be("");
            expect(data.QQ).to.be.a('string');
            expect(data.QQ).to.be("");
            expect(data.WEIBO).to.be.a('string');
            expect(data.WEIBO).to.be("");
            expect(data.WECHAT).to.be.a('string');
            expect(data.WECHAT).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofEmp', function() {
        it('should call getcofEmp successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofEmp call
          /*
          var opts = {};
          opts.fields = null;
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.getcofEmp(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofEmpById', function() {
        it('should call getcofEmpById successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofEmpById call and complete the assertions
          /*
          var cofEmpId = 789;

          instance.getcofEmpById(cofEmpId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofEmp);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.CODE).to.be.a('string');
            expect(data.CODE).to.be("");
            expect(data.NAME).to.be.a('string');
            expect(data.NAME).to.be("");
            expect(data.REALNAME).to.be.a('string');
            expect(data.REALNAME).to.be("");
            expect(data.GENDER).to.be.a('string');
            expect(data.GENDER).to.be("");
            expect(data.BIRTHDAY).to.be.a('string');
            expect(data.BIRTHDAY).to.be("");
            expect(data.STATUS).to.be.a('string');
            expect(data.STATUS).to.be("");
            expect(data.CARD_TYPE).to.be.a('string');
            expect(data.CARD_TYPE).to.be("");
            expect(data.CARD_NO).to.be.a('string');
            expect(data.CARD_NO).to.be("");
            expect(data.IN_DATE).to.be.a('string');
            expect(data.IN_DATE).to.be("");
            expect(data.OUT_DATE).to.be.a('string');
            expect(data.OUT_DATE).to.be("");
            expect(data.FAN_NO).to.be.a('string');
            expect(data.FAN_NO).to.be("");
            expect(data.MOBILE_NO).to.be.a('string');
            expect(data.MOBILE_NO).to.be("");
            expect(data.DESCRIPTION).to.be.a('string');
            expect(data.DESCRIPTION).to.be("");
            expect(data.CREATE_TIME).to.be.a('string');
            expect(data.CREATE_TIME).to.be("");
            expect(data.UPDATE_TIME).to.be.a('string');
            expect(data.UPDATE_TIME).to.be("");
            expect(data.TENANT_ID).to.be.a('string');
            expect(data.TENANT_ID).to.be("");
            expect(data.PARTY).to.be.a('string');
            expect(data.PARTY).to.be("");
            expect(data.DEGREE).to.be.a('string');
            expect(data.DEGREE).to.be("");
            expect(data.REMARK).to.be.a('string');
            expect(data.REMARK).to.be("");
            expect(data.O_TEL).to.be.a('string');
            expect(data.O_TEL).to.be("");
            expect(data.O_ADDRESS).to.be.a('string');
            expect(data.O_ADDRESS).to.be("");
            expect(data.O_EMAIL).to.be.a('string');
            expect(data.O_EMAIL).to.be("");
            expect(data.H_TEL).to.be.a('string');
            expect(data.H_TEL).to.be("");
            expect(data.H_ADDRESS).to.be.a('string');
            expect(data.H_ADDRESS).to.be("");
            expect(data.H_ZIPCODE).to.be.a('string');
            expect(data.H_ZIPCODE).to.be("");
            expect(data.P_EMAIL).to.be.a('string');
            expect(data.P_EMAIL).to.be("");
            expect(data.QQ).to.be.a('string');
            expect(data.QQ).to.be("");
            expect(data.WEIBO).to.be.a('string');
            expect(data.WEIBO).to.be("");
            expect(data.WECHAT).to.be.a('string');
            expect(data.WECHAT).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofEmpCount', function() {
        it('should call getcofEmpCount successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofEmpCount call and complete the assertions
          /*
          var opts = {};
          opts.where = null;

          instance.getcofEmpCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatecofEmp', function() {
        it('should call updatecofEmp successfully', function(done) {
          // TODO: uncomment, update parameter values for updatecofEmp call
          /*
          var cofEmpId = 789;
          var body = new XgeneCloud.CofEmp();
          body.ID = "";
          body.CODE = "";
          body.NAME = "";
          body.REALNAME = "";
          body.GENDER = "";
          body.BIRTHDAY = "";
          body.STATUS = "";
          body.CARD_TYPE = "";
          body.CARD_NO = "";
          body.IN_DATE = "";
          body.OUT_DATE = "";
          body.FAN_NO = "";
          body.MOBILE_NO = "";
          body.DESCRIPTION = "";
          body.CREATE_TIME = "";
          body.UPDATE_TIME = "";
          body.TENANT_ID = "";
          body.PARTY = "";
          body.DEGREE = "";
          body.REMARK = "";
          body.O_TEL = "";
          body.O_ADDRESS = "";
          body.O_EMAIL = "";
          body.H_TEL = "";
          body.H_ADDRESS = "";
          body.H_ZIPCODE = "";
          body.P_EMAIL = "";
          body.QQ = "";
          body.WEIBO = "";
          body.WECHAT = "";
          body.IS_FIXED = 0;

          instance.updatecofEmp(cofEmpId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatecofEmp_0', function() {
        it('should call updatecofEmp_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for updatecofEmp_0 call
          /*
          var body = [new XgeneCloud.CofEmp()];
          body[0].ID = "";
          body[0].CODE = "";
          body[0].NAME = "";
          body[0].REALNAME = "";
          body[0].GENDER = "";
          body[0].BIRTHDAY = "";
          body[0].STATUS = "";
          body[0].CARD_TYPE = "";
          body[0].CARD_NO = "";
          body[0].IN_DATE = "";
          body[0].OUT_DATE = "";
          body[0].FAN_NO = "";
          body[0].MOBILE_NO = "";
          body[0].DESCRIPTION = "";
          body[0].CREATE_TIME = "";
          body[0].UPDATE_TIME = "";
          body[0].TENANT_ID = "";
          body[0].PARTY = "";
          body[0].DEGREE = "";
          body[0].REMARK = "";
          body[0].O_TEL = "";
          body[0].O_ADDRESS = "";
          body[0].O_EMAIL = "";
          body[0].H_TEL = "";
          body[0].H_ADDRESS = "";
          body[0].H_ZIPCODE = "";
          body[0].P_EMAIL = "";
          body[0].QQ = "";
          body[0].WEIBO = "";
          body[0].WECHAT = "";
          body[0].IS_FIXED = 0;

          instance.updatecofEmp_0(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
