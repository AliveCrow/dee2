/*
 * XgeneCloud
 * Create APIs at the speed of your thoughts
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.XgeneCloud);
  }
}(this, function(expect, XgeneCloud) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new XgeneCloud.CofResGroupApi();
  });

  describe('(package)', function() {
    describe('CofResGroupApi', function() {
      describe('addcofResGroup', function() {
        it('should call addcofResGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for addcofResGroup call
          /*
          var body = new XgeneCloud.CofResGroup();
          body.ID = "";
          body.NAME = "";
          body.CODE = "";
          body.DESCRIPTION = "";
          body.CREATE_TIME = "";
          body.UPDATE_TIME = "";
          body.TENANT_ID = "";
          body.PARENT_ID = "";
          body.TYPE = "";
          body.RES_TYPE = "";
          body.SORT_NO = 0;
          body.IS_LEAF = 0;
          body.TREE_LEVEL = 0;
          body.SEQ = "";
          body.IS_FIXED = 0;

          instance.addcofResGroup(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkcofResGroupInsert', function() {
        it('should call bulkcofResGroupInsert successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkcofResGroupInsert call
          /*
          var body = [new XgeneCloud.CofResGroup()];
          body[0].ID = "";
          body[0].NAME = "";
          body[0].CODE = "";
          body[0].DESCRIPTION = "";
          body[0].CREATE_TIME = "";
          body[0].UPDATE_TIME = "";
          body[0].TENANT_ID = "";
          body[0].PARENT_ID = "";
          body[0].TYPE = "";
          body[0].RES_TYPE = "";
          body[0].SORT_NO = 0;
          body[0].IS_LEAF = 0;
          body[0].TREE_LEVEL = 0;
          body[0].SEQ = "";
          body[0].IS_FIXED = 0;

          instance.bulkcofResGroupInsert(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('checkcofResGroupExists', function() {
        it('should call checkcofResGroupExists successfully', function(done) {
          // TODO: uncomment, update parameter values for checkcofResGroupExists call and complete the assertions
          /*
          var cofResGroupId = 789;

          instance.checkcofResGroupExists(cofResGroupId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('boolean');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofResGroupAggregate', function() {
        it('should call cofResGroupAggregate successfully', function(done) {
          // TODO: uncomment, update parameter values for cofResGroupAggregate call and complete the assertions
          /*
          var columnName = null;
          var fields = null;
          var func = null;
          var opts = {};
          opts.having = null;
          opts.fields2 = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofResGroupAggregate(columnName, fields, func, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofResGroup);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.NAME).to.be.a('string');
            expect(data.NAME).to.be("");
            expect(data.CODE).to.be.a('string');
            expect(data.CODE).to.be("");
            expect(data.DESCRIPTION).to.be.a('string');
            expect(data.DESCRIPTION).to.be("");
            expect(data.CREATE_TIME).to.be.a('string');
            expect(data.CREATE_TIME).to.be("");
            expect(data.UPDATE_TIME).to.be.a('string');
            expect(data.UPDATE_TIME).to.be("");
            expect(data.TENANT_ID).to.be.a('string');
            expect(data.TENANT_ID).to.be("");
            expect(data.PARENT_ID).to.be.a('string');
            expect(data.PARENT_ID).to.be("");
            expect(data.TYPE).to.be.a('string');
            expect(data.TYPE).to.be("");
            expect(data.RES_TYPE).to.be.a('string');
            expect(data.RES_TYPE).to.be("");
            expect(data.SORT_NO).to.be.a('number');
            expect(data.SORT_NO).to.be(0);
            expect(data.IS_LEAF).to.be.a('number');
            expect(data.IS_LEAF).to.be(0);
            expect(data.TREE_LEVEL).to.be.a('number');
            expect(data.TREE_LEVEL).to.be(0);
            expect(data.SEQ).to.be.a('string');
            expect(data.SEQ).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofResGroupDistinct', function() {
        it('should call cofResGroupDistinct successfully', function(done) {
          // TODO: uncomment, update parameter values for cofResGroupDistinct call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofResGroupDistinct(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofResGroupDistribution', function() {
        it('should call cofResGroupDistribution successfully', function(done) {
          // TODO: uncomment, update parameter values for cofResGroupDistribution call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.min = 789;
          opts.max = 789;
          opts.step = 789;
          opts.steps = 789;
          opts.func = "func_example";

          instance.cofResGroupDistribution(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofResGroupGroupByColumn', function() {
        it('should call cofResGroupGroupByColumn successfully', function(done) {
          // TODO: uncomment, update parameter values for cofResGroupGroupByColumn call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofResGroupGroupByColumn(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofResGroup);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.NAME).to.be.a('string');
            expect(data.NAME).to.be("");
            expect(data.CODE).to.be.a('string');
            expect(data.CODE).to.be("");
            expect(data.DESCRIPTION).to.be.a('string');
            expect(data.DESCRIPTION).to.be("");
            expect(data.CREATE_TIME).to.be.a('string');
            expect(data.CREATE_TIME).to.be("");
            expect(data.UPDATE_TIME).to.be.a('string');
            expect(data.UPDATE_TIME).to.be("");
            expect(data.TENANT_ID).to.be.a('string');
            expect(data.TENANT_ID).to.be("");
            expect(data.PARENT_ID).to.be.a('string');
            expect(data.PARENT_ID).to.be("");
            expect(data.TYPE).to.be.a('string');
            expect(data.TYPE).to.be("");
            expect(data.RES_TYPE).to.be.a('string');
            expect(data.RES_TYPE).to.be("");
            expect(data.SORT_NO).to.be.a('number');
            expect(data.SORT_NO).to.be(0);
            expect(data.IS_LEAF).to.be.a('number');
            expect(data.IS_LEAF).to.be(0);
            expect(data.TREE_LEVEL).to.be.a('number');
            expect(data.TREE_LEVEL).to.be(0);
            expect(data.SEQ).to.be.a('string');
            expect(data.SEQ).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletecofResGroup', function() {
        it('should call deletecofResGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for deletecofResGroup call
          /*
          var cofResGroupId = 789;

          instance.deletecofResGroup(cofResGroupId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletecofResGroup_0', function() {
        it('should call deletecofResGroup_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for deletecofResGroup_0 call
          /*
          var body = [new XgeneCloud.CofResGroup()];
          body[0].ID = "";
          body[0].NAME = "";
          body[0].CODE = "";
          body[0].DESCRIPTION = "";
          body[0].CREATE_TIME = "";
          body[0].UPDATE_TIME = "";
          body[0].TENANT_ID = "";
          body[0].PARENT_ID = "";
          body[0].TYPE = "";
          body[0].RES_TYPE = "";
          body[0].SORT_NO = 0;
          body[0].IS_LEAF = 0;
          body[0].TREE_LEVEL = 0;
          body[0].SEQ = "";
          body[0].IS_FIXED = 0;

          instance.deletecofResGroup_0(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findOnecofResGroup', function() {
        it('should call findOnecofResGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for findOnecofResGroup call and complete the assertions
          /*
          var opts = {};
          opts.fields = null;
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.findOnecofResGroup(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofResGroup);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.NAME).to.be.a('string');
            expect(data.NAME).to.be("");
            expect(data.CODE).to.be.a('string');
            expect(data.CODE).to.be("");
            expect(data.DESCRIPTION).to.be.a('string');
            expect(data.DESCRIPTION).to.be("");
            expect(data.CREATE_TIME).to.be.a('string');
            expect(data.CREATE_TIME).to.be("");
            expect(data.UPDATE_TIME).to.be.a('string');
            expect(data.UPDATE_TIME).to.be("");
            expect(data.TENANT_ID).to.be.a('string');
            expect(data.TENANT_ID).to.be("");
            expect(data.PARENT_ID).to.be.a('string');
            expect(data.PARENT_ID).to.be("");
            expect(data.TYPE).to.be.a('string');
            expect(data.TYPE).to.be("");
            expect(data.RES_TYPE).to.be.a('string');
            expect(data.RES_TYPE).to.be("");
            expect(data.SORT_NO).to.be.a('number');
            expect(data.SORT_NO).to.be(0);
            expect(data.IS_LEAF).to.be.a('number');
            expect(data.IS_LEAF).to.be(0);
            expect(data.TREE_LEVEL).to.be.a('number');
            expect(data.TREE_LEVEL).to.be(0);
            expect(data.SEQ).to.be.a('string');
            expect(data.SEQ).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofResGroup', function() {
        it('should call getcofResGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofResGroup call
          /*
          var opts = {};
          opts.fields = null;
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.getcofResGroup(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofResGroupById', function() {
        it('should call getcofResGroupById successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofResGroupById call and complete the assertions
          /*
          var cofResGroupId = 789;

          instance.getcofResGroupById(cofResGroupId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofResGroup);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.NAME).to.be.a('string');
            expect(data.NAME).to.be("");
            expect(data.CODE).to.be.a('string');
            expect(data.CODE).to.be("");
            expect(data.DESCRIPTION).to.be.a('string');
            expect(data.DESCRIPTION).to.be("");
            expect(data.CREATE_TIME).to.be.a('string');
            expect(data.CREATE_TIME).to.be("");
            expect(data.UPDATE_TIME).to.be.a('string');
            expect(data.UPDATE_TIME).to.be("");
            expect(data.TENANT_ID).to.be.a('string');
            expect(data.TENANT_ID).to.be("");
            expect(data.PARENT_ID).to.be.a('string');
            expect(data.PARENT_ID).to.be("");
            expect(data.TYPE).to.be.a('string');
            expect(data.TYPE).to.be("");
            expect(data.RES_TYPE).to.be.a('string');
            expect(data.RES_TYPE).to.be("");
            expect(data.SORT_NO).to.be.a('number');
            expect(data.SORT_NO).to.be(0);
            expect(data.IS_LEAF).to.be.a('number');
            expect(data.IS_LEAF).to.be(0);
            expect(data.TREE_LEVEL).to.be.a('number');
            expect(data.TREE_LEVEL).to.be(0);
            expect(data.SEQ).to.be.a('string');
            expect(data.SEQ).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofResGroupCount', function() {
        it('should call getcofResGroupCount successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofResGroupCount call and complete the assertions
          /*
          var opts = {};
          opts.where = null;

          instance.getcofResGroupCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatecofResGroup', function() {
        it('should call updatecofResGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for updatecofResGroup call
          /*
          var cofResGroupId = 789;
          var body = new XgeneCloud.CofResGroup();
          body.ID = "";
          body.NAME = "";
          body.CODE = "";
          body.DESCRIPTION = "";
          body.CREATE_TIME = "";
          body.UPDATE_TIME = "";
          body.TENANT_ID = "";
          body.PARENT_ID = "";
          body.TYPE = "";
          body.RES_TYPE = "";
          body.SORT_NO = 0;
          body.IS_LEAF = 0;
          body.TREE_LEVEL = 0;
          body.SEQ = "";
          body.IS_FIXED = 0;

          instance.updatecofResGroup(cofResGroupId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatecofResGroup_0', function() {
        it('should call updatecofResGroup_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for updatecofResGroup_0 call
          /*
          var body = [new XgeneCloud.CofResGroup()];
          body[0].ID = "";
          body[0].NAME = "";
          body[0].CODE = "";
          body[0].DESCRIPTION = "";
          body[0].CREATE_TIME = "";
          body[0].UPDATE_TIME = "";
          body[0].TENANT_ID = "";
          body[0].PARENT_ID = "";
          body[0].TYPE = "";
          body[0].RES_TYPE = "";
          body[0].SORT_NO = 0;
          body[0].IS_LEAF = 0;
          body[0].TREE_LEVEL = 0;
          body[0].SEQ = "";
          body[0].IS_FIXED = 0;

          instance.updatecofResGroup_0(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
