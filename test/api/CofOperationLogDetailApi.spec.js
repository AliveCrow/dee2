/*
 * XgeneCloud
 * Create APIs at the speed of your thoughts
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.XgeneCloud);
  }
}(this, function(expect, XgeneCloud) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new XgeneCloud.CofOperationLogDetailApi();
  });

  describe('(package)', function() {
    describe('CofOperationLogDetailApi', function() {
      describe('addcofOperationLogDetail', function() {
        it('should call addcofOperationLogDetail successfully', function(done) {
          // TODO: uncomment, update parameter values for addcofOperationLogDetail call
          /*
          var body = new XgeneCloud.CofOperationLogDetail();
          body.ID = "";
          body.OLD_DATA_JSON = "";
          body.NEW_DATA_JSON = "";

          instance.addcofOperationLogDetail(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkcofOperationLogDetailInsert', function() {
        it('should call bulkcofOperationLogDetailInsert successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkcofOperationLogDetailInsert call
          /*
          var body = [new XgeneCloud.CofOperationLogDetail()];
          body[0].ID = "";
          body[0].OLD_DATA_JSON = "";
          body[0].NEW_DATA_JSON = "";

          instance.bulkcofOperationLogDetailInsert(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('checkcofOperationLogDetailExists', function() {
        it('should call checkcofOperationLogDetailExists successfully', function(done) {
          // TODO: uncomment, update parameter values for checkcofOperationLogDetailExists call and complete the assertions
          /*
          var cofOperationLogDetailId = 789;

          instance.checkcofOperationLogDetailExists(cofOperationLogDetailId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('boolean');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofOperationLogDetailAggregate', function() {
        it('should call cofOperationLogDetailAggregate successfully', function(done) {
          // TODO: uncomment, update parameter values for cofOperationLogDetailAggregate call and complete the assertions
          /*
          var columnName = null;
          var fields = null;
          var func = null;
          var opts = {};
          opts.having = null;
          opts.fields2 = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofOperationLogDetailAggregate(columnName, fields, func, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofOperationLogDetail);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.OLD_DATA_JSON).to.be.a('string');
            expect(data.OLD_DATA_JSON).to.be("");
            expect(data.NEW_DATA_JSON).to.be.a('string');
            expect(data.NEW_DATA_JSON).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofOperationLogDetailDistinct', function() {
        it('should call cofOperationLogDetailDistinct successfully', function(done) {
          // TODO: uncomment, update parameter values for cofOperationLogDetailDistinct call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofOperationLogDetailDistinct(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofOperationLogDetailDistribution', function() {
        it('should call cofOperationLogDetailDistribution successfully', function(done) {
          // TODO: uncomment, update parameter values for cofOperationLogDetailDistribution call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.min = 789;
          opts.max = 789;
          opts.step = 789;
          opts.steps = 789;
          opts.func = "func_example";

          instance.cofOperationLogDetailDistribution(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofOperationLogDetailGroupByColumn', function() {
        it('should call cofOperationLogDetailGroupByColumn successfully', function(done) {
          // TODO: uncomment, update parameter values for cofOperationLogDetailGroupByColumn call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofOperationLogDetailGroupByColumn(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofOperationLogDetail);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.OLD_DATA_JSON).to.be.a('string');
            expect(data.OLD_DATA_JSON).to.be("");
            expect(data.NEW_DATA_JSON).to.be.a('string');
            expect(data.NEW_DATA_JSON).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletecofOperationLogDetail', function() {
        it('should call deletecofOperationLogDetail successfully', function(done) {
          // TODO: uncomment, update parameter values for deletecofOperationLogDetail call
          /*
          var cofOperationLogDetailId = 789;

          instance.deletecofOperationLogDetail(cofOperationLogDetailId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletecofOperationLogDetail_0', function() {
        it('should call deletecofOperationLogDetail_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for deletecofOperationLogDetail_0 call
          /*
          var body = [new XgeneCloud.CofOperationLogDetail()];
          body[0].ID = "";
          body[0].OLD_DATA_JSON = "";
          body[0].NEW_DATA_JSON = "";

          instance.deletecofOperationLogDetail_0(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findOnecofOperationLogDetail', function() {
        it('should call findOnecofOperationLogDetail successfully', function(done) {
          // TODO: uncomment, update parameter values for findOnecofOperationLogDetail call and complete the assertions
          /*
          var opts = {};
          opts.fields = null;
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.findOnecofOperationLogDetail(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofOperationLogDetail);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.OLD_DATA_JSON).to.be.a('string');
            expect(data.OLD_DATA_JSON).to.be("");
            expect(data.NEW_DATA_JSON).to.be.a('string');
            expect(data.NEW_DATA_JSON).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofOperationLogDetail', function() {
        it('should call getcofOperationLogDetail successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofOperationLogDetail call
          /*
          var opts = {};
          opts.fields = null;
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.getcofOperationLogDetail(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofOperationLogDetailById', function() {
        it('should call getcofOperationLogDetailById successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofOperationLogDetailById call and complete the assertions
          /*
          var cofOperationLogDetailId = 789;

          instance.getcofOperationLogDetailById(cofOperationLogDetailId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofOperationLogDetail);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.OLD_DATA_JSON).to.be.a('string');
            expect(data.OLD_DATA_JSON).to.be("");
            expect(data.NEW_DATA_JSON).to.be.a('string');
            expect(data.NEW_DATA_JSON).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofOperationLogDetailCount', function() {
        it('should call getcofOperationLogDetailCount successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofOperationLogDetailCount call and complete the assertions
          /*
          var opts = {};
          opts.where = null;

          instance.getcofOperationLogDetailCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatecofOperationLogDetail', function() {
        it('should call updatecofOperationLogDetail successfully', function(done) {
          // TODO: uncomment, update parameter values for updatecofOperationLogDetail call
          /*
          var cofOperationLogDetailId = 789;
          var body = new XgeneCloud.CofOperationLogDetail();
          body.ID = "";
          body.OLD_DATA_JSON = "";
          body.NEW_DATA_JSON = "";

          instance.updatecofOperationLogDetail(cofOperationLogDetailId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatecofOperationLogDetail_0', function() {
        it('should call updatecofOperationLogDetail_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for updatecofOperationLogDetail_0 call
          /*
          var body = [new XgeneCloud.CofOperationLogDetail()];
          body[0].ID = "";
          body[0].OLD_DATA_JSON = "";
          body[0].NEW_DATA_JSON = "";

          instance.updatecofOperationLogDetail_0(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
