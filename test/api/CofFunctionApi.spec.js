/*
 * XgeneCloud
 * Create APIs at the speed of your thoughts
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.XgeneCloud);
  }
}(this, function(expect, XgeneCloud) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new XgeneCloud.CofFunctionApi();
  });

  describe('(package)', function() {
    describe('CofFunctionApi', function() {
      describe('addcofFunction', function() {
        it('should call addcofFunction successfully', function(done) {
          // TODO: uncomment, update parameter values for addcofFunction call
          /*
          var body = new XgeneCloud.CofFunction();
          body.ID = "";
          body.GROUP_ID = "";
          body.NAME = "";
          body.CODE = "";
          body.URLS = "";
          body.DESCRIPTION = "";
          body.CREATE_TIME = "";
          body.UPDATE_TIME = "";
          body.TENANT_ID = "";
          body.TYPE = "";
          body.IS_CHECK = 0;
          body.IS_FIXED = 0;

          instance.addcofFunction(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkcofFunctionInsert', function() {
        it('should call bulkcofFunctionInsert successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkcofFunctionInsert call
          /*
          var body = [new XgeneCloud.CofFunction()];
          body[0].ID = "";
          body[0].GROUP_ID = "";
          body[0].NAME = "";
          body[0].CODE = "";
          body[0].URLS = "";
          body[0].DESCRIPTION = "";
          body[0].CREATE_TIME = "";
          body[0].UPDATE_TIME = "";
          body[0].TENANT_ID = "";
          body[0].TYPE = "";
          body[0].IS_CHECK = 0;
          body[0].IS_FIXED = 0;

          instance.bulkcofFunctionInsert(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('checkcofFunctionExists', function() {
        it('should call checkcofFunctionExists successfully', function(done) {
          // TODO: uncomment, update parameter values for checkcofFunctionExists call and complete the assertions
          /*
          var cofFunctionId = 789;

          instance.checkcofFunctionExists(cofFunctionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('boolean');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofFunctionAggregate', function() {
        it('should call cofFunctionAggregate successfully', function(done) {
          // TODO: uncomment, update parameter values for cofFunctionAggregate call and complete the assertions
          /*
          var columnName = null;
          var fields = null;
          var func = null;
          var opts = {};
          opts.having = null;
          opts.fields2 = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofFunctionAggregate(columnName, fields, func, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofFunction);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.GROUP_ID).to.be.a('string');
            expect(data.GROUP_ID).to.be("");
            expect(data.NAME).to.be.a('string');
            expect(data.NAME).to.be("");
            expect(data.CODE).to.be.a('string');
            expect(data.CODE).to.be("");
            expect(data.URLS).to.be.a('string');
            expect(data.URLS).to.be("");
            expect(data.DESCRIPTION).to.be.a('string');
            expect(data.DESCRIPTION).to.be("");
            expect(data.CREATE_TIME).to.be.a('string');
            expect(data.CREATE_TIME).to.be("");
            expect(data.UPDATE_TIME).to.be.a('string');
            expect(data.UPDATE_TIME).to.be("");
            expect(data.TENANT_ID).to.be.a('string');
            expect(data.TENANT_ID).to.be("");
            expect(data.TYPE).to.be.a('string');
            expect(data.TYPE).to.be("");
            expect(data.IS_CHECK).to.be.a('number');
            expect(data.IS_CHECK).to.be(0);
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofFunctionDistinct', function() {
        it('should call cofFunctionDistinct successfully', function(done) {
          // TODO: uncomment, update parameter values for cofFunctionDistinct call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofFunctionDistinct(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofFunctionDistribution', function() {
        it('should call cofFunctionDistribution successfully', function(done) {
          // TODO: uncomment, update parameter values for cofFunctionDistribution call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.min = 789;
          opts.max = 789;
          opts.step = 789;
          opts.steps = 789;
          opts.func = "func_example";

          instance.cofFunctionDistribution(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofFunctionGroupByColumn', function() {
        it('should call cofFunctionGroupByColumn successfully', function(done) {
          // TODO: uncomment, update parameter values for cofFunctionGroupByColumn call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofFunctionGroupByColumn(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofFunction);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.GROUP_ID).to.be.a('string');
            expect(data.GROUP_ID).to.be("");
            expect(data.NAME).to.be.a('string');
            expect(data.NAME).to.be("");
            expect(data.CODE).to.be.a('string');
            expect(data.CODE).to.be("");
            expect(data.URLS).to.be.a('string');
            expect(data.URLS).to.be("");
            expect(data.DESCRIPTION).to.be.a('string');
            expect(data.DESCRIPTION).to.be("");
            expect(data.CREATE_TIME).to.be.a('string');
            expect(data.CREATE_TIME).to.be("");
            expect(data.UPDATE_TIME).to.be.a('string');
            expect(data.UPDATE_TIME).to.be("");
            expect(data.TENANT_ID).to.be.a('string');
            expect(data.TENANT_ID).to.be("");
            expect(data.TYPE).to.be.a('string');
            expect(data.TYPE).to.be("");
            expect(data.IS_CHECK).to.be.a('number');
            expect(data.IS_CHECK).to.be(0);
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletecofFunction', function() {
        it('should call deletecofFunction successfully', function(done) {
          // TODO: uncomment, update parameter values for deletecofFunction call
          /*
          var cofFunctionId = 789;

          instance.deletecofFunction(cofFunctionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletecofFunction_0', function() {
        it('should call deletecofFunction_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for deletecofFunction_0 call
          /*
          var body = [new XgeneCloud.CofFunction()];
          body[0].ID = "";
          body[0].GROUP_ID = "";
          body[0].NAME = "";
          body[0].CODE = "";
          body[0].URLS = "";
          body[0].DESCRIPTION = "";
          body[0].CREATE_TIME = "";
          body[0].UPDATE_TIME = "";
          body[0].TENANT_ID = "";
          body[0].TYPE = "";
          body[0].IS_CHECK = 0;
          body[0].IS_FIXED = 0;

          instance.deletecofFunction_0(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findOnecofFunction', function() {
        it('should call findOnecofFunction successfully', function(done) {
          // TODO: uncomment, update parameter values for findOnecofFunction call and complete the assertions
          /*
          var opts = {};
          opts.fields = null;
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.findOnecofFunction(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofFunction);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.GROUP_ID).to.be.a('string');
            expect(data.GROUP_ID).to.be("");
            expect(data.NAME).to.be.a('string');
            expect(data.NAME).to.be("");
            expect(data.CODE).to.be.a('string');
            expect(data.CODE).to.be("");
            expect(data.URLS).to.be.a('string');
            expect(data.URLS).to.be("");
            expect(data.DESCRIPTION).to.be.a('string');
            expect(data.DESCRIPTION).to.be("");
            expect(data.CREATE_TIME).to.be.a('string');
            expect(data.CREATE_TIME).to.be("");
            expect(data.UPDATE_TIME).to.be.a('string');
            expect(data.UPDATE_TIME).to.be("");
            expect(data.TENANT_ID).to.be.a('string');
            expect(data.TENANT_ID).to.be("");
            expect(data.TYPE).to.be.a('string');
            expect(data.TYPE).to.be("");
            expect(data.IS_CHECK).to.be.a('number');
            expect(data.IS_CHECK).to.be(0);
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofFunction', function() {
        it('should call getcofFunction successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofFunction call
          /*
          var opts = {};
          opts.fields = null;
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.getcofFunction(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofFunctionById', function() {
        it('should call getcofFunctionById successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofFunctionById call and complete the assertions
          /*
          var cofFunctionId = 789;

          instance.getcofFunctionById(cofFunctionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofFunction);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.GROUP_ID).to.be.a('string');
            expect(data.GROUP_ID).to.be("");
            expect(data.NAME).to.be.a('string');
            expect(data.NAME).to.be("");
            expect(data.CODE).to.be.a('string');
            expect(data.CODE).to.be("");
            expect(data.URLS).to.be.a('string');
            expect(data.URLS).to.be("");
            expect(data.DESCRIPTION).to.be.a('string');
            expect(data.DESCRIPTION).to.be("");
            expect(data.CREATE_TIME).to.be.a('string');
            expect(data.CREATE_TIME).to.be("");
            expect(data.UPDATE_TIME).to.be.a('string');
            expect(data.UPDATE_TIME).to.be("");
            expect(data.TENANT_ID).to.be.a('string');
            expect(data.TENANT_ID).to.be("");
            expect(data.TYPE).to.be.a('string');
            expect(data.TYPE).to.be("");
            expect(data.IS_CHECK).to.be.a('number');
            expect(data.IS_CHECK).to.be(0);
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofFunctionCount', function() {
        it('should call getcofFunctionCount successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofFunctionCount call and complete the assertions
          /*
          var opts = {};
          opts.where = null;

          instance.getcofFunctionCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatecofFunction', function() {
        it('should call updatecofFunction successfully', function(done) {
          // TODO: uncomment, update parameter values for updatecofFunction call
          /*
          var cofFunctionId = 789;
          var body = new XgeneCloud.CofFunction();
          body.ID = "";
          body.GROUP_ID = "";
          body.NAME = "";
          body.CODE = "";
          body.URLS = "";
          body.DESCRIPTION = "";
          body.CREATE_TIME = "";
          body.UPDATE_TIME = "";
          body.TENANT_ID = "";
          body.TYPE = "";
          body.IS_CHECK = 0;
          body.IS_FIXED = 0;

          instance.updatecofFunction(cofFunctionId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatecofFunction_0', function() {
        it('should call updatecofFunction_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for updatecofFunction_0 call
          /*
          var body = [new XgeneCloud.CofFunction()];
          body[0].ID = "";
          body[0].GROUP_ID = "";
          body[0].NAME = "";
          body[0].CODE = "";
          body[0].URLS = "";
          body[0].DESCRIPTION = "";
          body[0].CREATE_TIME = "";
          body[0].UPDATE_TIME = "";
          body[0].TENANT_ID = "";
          body[0].TYPE = "";
          body[0].IS_CHECK = 0;
          body[0].IS_FIXED = 0;

          instance.updatecofFunction_0(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
