/*
 * XgeneCloud
 * Create APIs at the speed of your thoughts
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.XgeneCloud);
  }
}(this, function(expect, XgeneCloud) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new XgeneCloud.CofPositionEmpMappingApi();
  });

  describe('(package)', function() {
    describe('CofPositionEmpMappingApi', function() {
      describe('addcofPositionEmpMapping', function() {
        it('should call addcofPositionEmpMapping successfully', function(done) {
          // TODO: uncomment, update parameter values for addcofPositionEmpMapping call
          /*
          var body = new XgeneCloud.CofPositionEmpMapping();
          body.ID = "";
          body.EMP_ID = "";
          body.POSITION_ID = "";
          body.IS_FIXED = 0;

          instance.addcofPositionEmpMapping(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkcofPositionEmpMappingInsert', function() {
        it('should call bulkcofPositionEmpMappingInsert successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkcofPositionEmpMappingInsert call
          /*
          var body = [new XgeneCloud.CofPositionEmpMapping()];
          body[0].ID = "";
          body[0].EMP_ID = "";
          body[0].POSITION_ID = "";
          body[0].IS_FIXED = 0;

          instance.bulkcofPositionEmpMappingInsert(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('checkcofPositionEmpMappingExists', function() {
        it('should call checkcofPositionEmpMappingExists successfully', function(done) {
          // TODO: uncomment, update parameter values for checkcofPositionEmpMappingExists call and complete the assertions
          /*
          var cofPositionEmpMappingId = 789;

          instance.checkcofPositionEmpMappingExists(cofPositionEmpMappingId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('boolean');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofPositionEmpMappingAggregate', function() {
        it('should call cofPositionEmpMappingAggregate successfully', function(done) {
          // TODO: uncomment, update parameter values for cofPositionEmpMappingAggregate call and complete the assertions
          /*
          var columnName = null;
          var fields = null;
          var func = null;
          var opts = {};
          opts.having = null;
          opts.fields2 = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofPositionEmpMappingAggregate(columnName, fields, func, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofPositionEmpMapping);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.EMP_ID).to.be.a('string');
            expect(data.EMP_ID).to.be("");
            expect(data.POSITION_ID).to.be.a('string');
            expect(data.POSITION_ID).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofPositionEmpMappingDistinct', function() {
        it('should call cofPositionEmpMappingDistinct successfully', function(done) {
          // TODO: uncomment, update parameter values for cofPositionEmpMappingDistinct call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofPositionEmpMappingDistinct(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofPositionEmpMappingDistribution', function() {
        it('should call cofPositionEmpMappingDistribution successfully', function(done) {
          // TODO: uncomment, update parameter values for cofPositionEmpMappingDistribution call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.min = 789;
          opts.max = 789;
          opts.step = 789;
          opts.steps = 789;
          opts.func = "func_example";

          instance.cofPositionEmpMappingDistribution(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofPositionEmpMappingGroupByColumn', function() {
        it('should call cofPositionEmpMappingGroupByColumn successfully', function(done) {
          // TODO: uncomment, update parameter values for cofPositionEmpMappingGroupByColumn call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofPositionEmpMappingGroupByColumn(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofPositionEmpMapping);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.EMP_ID).to.be.a('string');
            expect(data.EMP_ID).to.be("");
            expect(data.POSITION_ID).to.be.a('string');
            expect(data.POSITION_ID).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletecofPositionEmpMapping', function() {
        it('should call deletecofPositionEmpMapping successfully', function(done) {
          // TODO: uncomment, update parameter values for deletecofPositionEmpMapping call
          /*
          var cofPositionEmpMappingId = 789;

          instance.deletecofPositionEmpMapping(cofPositionEmpMappingId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletecofPositionEmpMapping_0', function() {
        it('should call deletecofPositionEmpMapping_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for deletecofPositionEmpMapping_0 call
          /*
          var body = [new XgeneCloud.CofPositionEmpMapping()];
          body[0].ID = "";
          body[0].EMP_ID = "";
          body[0].POSITION_ID = "";
          body[0].IS_FIXED = 0;

          instance.deletecofPositionEmpMapping_0(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findOnecofPositionEmpMapping', function() {
        it('should call findOnecofPositionEmpMapping successfully', function(done) {
          // TODO: uncomment, update parameter values for findOnecofPositionEmpMapping call and complete the assertions
          /*
          var opts = {};
          opts.fields = null;
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.findOnecofPositionEmpMapping(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofPositionEmpMapping);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.EMP_ID).to.be.a('string');
            expect(data.EMP_ID).to.be("");
            expect(data.POSITION_ID).to.be.a('string');
            expect(data.POSITION_ID).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofPositionEmpMapping', function() {
        it('should call getcofPositionEmpMapping successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofPositionEmpMapping call
          /*
          var opts = {};
          opts.fields = null;
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.getcofPositionEmpMapping(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofPositionEmpMappingById', function() {
        it('should call getcofPositionEmpMappingById successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofPositionEmpMappingById call and complete the assertions
          /*
          var cofPositionEmpMappingId = 789;

          instance.getcofPositionEmpMappingById(cofPositionEmpMappingId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofPositionEmpMapping);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.EMP_ID).to.be.a('string');
            expect(data.EMP_ID).to.be("");
            expect(data.POSITION_ID).to.be.a('string');
            expect(data.POSITION_ID).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofPositionEmpMappingCount', function() {
        it('should call getcofPositionEmpMappingCount successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofPositionEmpMappingCount call and complete the assertions
          /*
          var opts = {};
          opts.where = null;

          instance.getcofPositionEmpMappingCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatecofPositionEmpMapping', function() {
        it('should call updatecofPositionEmpMapping successfully', function(done) {
          // TODO: uncomment, update parameter values for updatecofPositionEmpMapping call
          /*
          var cofPositionEmpMappingId = 789;
          var body = new XgeneCloud.CofPositionEmpMapping();
          body.ID = "";
          body.EMP_ID = "";
          body.POSITION_ID = "";
          body.IS_FIXED = 0;

          instance.updatecofPositionEmpMapping(cofPositionEmpMappingId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatecofPositionEmpMapping_0', function() {
        it('should call updatecofPositionEmpMapping_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for updatecofPositionEmpMapping_0 call
          /*
          var body = [new XgeneCloud.CofPositionEmpMapping()];
          body[0].ID = "";
          body[0].EMP_ID = "";
          body[0].POSITION_ID = "";
          body[0].IS_FIXED = 0;

          instance.updatecofPositionEmpMapping_0(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
