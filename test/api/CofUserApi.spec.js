/*
 * XgeneCloud
 * Create APIs at the speed of your thoughts
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.XgeneCloud);
  }
}(this, function(expect, XgeneCloud) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new XgeneCloud.CofUserApi();
  });

  describe('(package)', function() {
    describe('CofUserApi', function() {
      describe('addcofUser', function() {
        it('should call addcofUser successfully', function(done) {
          // TODO: uncomment, update parameter values for addcofUser call
          /*
          var body = new XgeneCloud.CofUser();
          body.ID = "";
          body.EMP_ID = "";
          body.NAME = "";
          body.DESCRIPTION = "";
          body.CREATE_TIME = "";
          body.UPDATE_TIME = "";
          body.EMAIL = "";
          body.TENANT_ID = "";
          body.PASSWORD = "";
          body.SALT = "";
          body.STATUS = "";
          body.AUTH_MODE = "";
          body.UNLOCK_TIME = "";
          body.LAST_LOGIN = "";
          body.START_DATE = "";
          body.END_DATE = "";
          body.IS_FIXED = 0;

          instance.addcofUser(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkcofUserInsert', function() {
        it('should call bulkcofUserInsert successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkcofUserInsert call
          /*
          var body = [new XgeneCloud.CofUser()];
          body[0].ID = "";
          body[0].EMP_ID = "";
          body[0].NAME = "";
          body[0].DESCRIPTION = "";
          body[0].CREATE_TIME = "";
          body[0].UPDATE_TIME = "";
          body[0].EMAIL = "";
          body[0].TENANT_ID = "";
          body[0].PASSWORD = "";
          body[0].SALT = "";
          body[0].STATUS = "";
          body[0].AUTH_MODE = "";
          body[0].UNLOCK_TIME = "";
          body[0].LAST_LOGIN = "";
          body[0].START_DATE = "";
          body[0].END_DATE = "";
          body[0].IS_FIXED = 0;

          instance.bulkcofUserInsert(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('checkcofUserExists', function() {
        it('should call checkcofUserExists successfully', function(done) {
          // TODO: uncomment, update parameter values for checkcofUserExists call and complete the assertions
          /*
          var cofUserId = 789;

          instance.checkcofUserExists(cofUserId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('boolean');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofUserAggregate', function() {
        it('should call cofUserAggregate successfully', function(done) {
          // TODO: uncomment, update parameter values for cofUserAggregate call and complete the assertions
          /*
          var columnName = null;
          var fields = null;
          var func = null;
          var opts = {};
          opts.having = null;
          opts.fields2 = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofUserAggregate(columnName, fields, func, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofUser);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.EMP_ID).to.be.a('string');
            expect(data.EMP_ID).to.be("");
            expect(data.NAME).to.be.a('string');
            expect(data.NAME).to.be("");
            expect(data.DESCRIPTION).to.be.a('string');
            expect(data.DESCRIPTION).to.be("");
            expect(data.CREATE_TIME).to.be.a('string');
            expect(data.CREATE_TIME).to.be("");
            expect(data.UPDATE_TIME).to.be.a('string');
            expect(data.UPDATE_TIME).to.be("");
            expect(data.EMAIL).to.be.a('string');
            expect(data.EMAIL).to.be("");
            expect(data.TENANT_ID).to.be.a('string');
            expect(data.TENANT_ID).to.be("");
            expect(data.PASSWORD).to.be.a('string');
            expect(data.PASSWORD).to.be("");
            expect(data.SALT).to.be.a('string');
            expect(data.SALT).to.be("");
            expect(data.STATUS).to.be.a('string');
            expect(data.STATUS).to.be("");
            expect(data.AUTH_MODE).to.be.a('string');
            expect(data.AUTH_MODE).to.be("");
            expect(data.UNLOCK_TIME).to.be.a('string');
            expect(data.UNLOCK_TIME).to.be("");
            expect(data.LAST_LOGIN).to.be.a('string');
            expect(data.LAST_LOGIN).to.be("");
            expect(data.START_DATE).to.be.a('string');
            expect(data.START_DATE).to.be("");
            expect(data.END_DATE).to.be.a('string');
            expect(data.END_DATE).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofUserDistinct', function() {
        it('should call cofUserDistinct successfully', function(done) {
          // TODO: uncomment, update parameter values for cofUserDistinct call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofUserDistinct(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofUserDistribution', function() {
        it('should call cofUserDistribution successfully', function(done) {
          // TODO: uncomment, update parameter values for cofUserDistribution call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.min = 789;
          opts.max = 789;
          opts.step = 789;
          opts.steps = 789;
          opts.func = "func_example";

          instance.cofUserDistribution(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofUserGroupByColumn', function() {
        it('should call cofUserGroupByColumn successfully', function(done) {
          // TODO: uncomment, update parameter values for cofUserGroupByColumn call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofUserGroupByColumn(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofUser);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.EMP_ID).to.be.a('string');
            expect(data.EMP_ID).to.be("");
            expect(data.NAME).to.be.a('string');
            expect(data.NAME).to.be("");
            expect(data.DESCRIPTION).to.be.a('string');
            expect(data.DESCRIPTION).to.be("");
            expect(data.CREATE_TIME).to.be.a('string');
            expect(data.CREATE_TIME).to.be("");
            expect(data.UPDATE_TIME).to.be.a('string');
            expect(data.UPDATE_TIME).to.be("");
            expect(data.EMAIL).to.be.a('string');
            expect(data.EMAIL).to.be("");
            expect(data.TENANT_ID).to.be.a('string');
            expect(data.TENANT_ID).to.be("");
            expect(data.PASSWORD).to.be.a('string');
            expect(data.PASSWORD).to.be("");
            expect(data.SALT).to.be.a('string');
            expect(data.SALT).to.be("");
            expect(data.STATUS).to.be.a('string');
            expect(data.STATUS).to.be("");
            expect(data.AUTH_MODE).to.be.a('string');
            expect(data.AUTH_MODE).to.be("");
            expect(data.UNLOCK_TIME).to.be.a('string');
            expect(data.UNLOCK_TIME).to.be("");
            expect(data.LAST_LOGIN).to.be.a('string');
            expect(data.LAST_LOGIN).to.be("");
            expect(data.START_DATE).to.be.a('string');
            expect(data.START_DATE).to.be("");
            expect(data.END_DATE).to.be.a('string');
            expect(data.END_DATE).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletecofUser', function() {
        it('should call deletecofUser successfully', function(done) {
          // TODO: uncomment, update parameter values for deletecofUser call
          /*
          var cofUserId = 789;

          instance.deletecofUser(cofUserId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletecofUser_0', function() {
        it('should call deletecofUser_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for deletecofUser_0 call
          /*
          var body = [new XgeneCloud.CofUser()];
          body[0].ID = "";
          body[0].EMP_ID = "";
          body[0].NAME = "";
          body[0].DESCRIPTION = "";
          body[0].CREATE_TIME = "";
          body[0].UPDATE_TIME = "";
          body[0].EMAIL = "";
          body[0].TENANT_ID = "";
          body[0].PASSWORD = "";
          body[0].SALT = "";
          body[0].STATUS = "";
          body[0].AUTH_MODE = "";
          body[0].UNLOCK_TIME = "";
          body[0].LAST_LOGIN = "";
          body[0].START_DATE = "";
          body[0].END_DATE = "";
          body[0].IS_FIXED = 0;

          instance.deletecofUser_0(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findOnecofUser', function() {
        it('should call findOnecofUser successfully', function(done) {
          // TODO: uncomment, update parameter values for findOnecofUser call and complete the assertions
          /*
          var opts = {};
          opts.fields = null;
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.findOnecofUser(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofUser);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.EMP_ID).to.be.a('string');
            expect(data.EMP_ID).to.be("");
            expect(data.NAME).to.be.a('string');
            expect(data.NAME).to.be("");
            expect(data.DESCRIPTION).to.be.a('string');
            expect(data.DESCRIPTION).to.be("");
            expect(data.CREATE_TIME).to.be.a('string');
            expect(data.CREATE_TIME).to.be("");
            expect(data.UPDATE_TIME).to.be.a('string');
            expect(data.UPDATE_TIME).to.be("");
            expect(data.EMAIL).to.be.a('string');
            expect(data.EMAIL).to.be("");
            expect(data.TENANT_ID).to.be.a('string');
            expect(data.TENANT_ID).to.be("");
            expect(data.PASSWORD).to.be.a('string');
            expect(data.PASSWORD).to.be("");
            expect(data.SALT).to.be.a('string');
            expect(data.SALT).to.be("");
            expect(data.STATUS).to.be.a('string');
            expect(data.STATUS).to.be("");
            expect(data.AUTH_MODE).to.be.a('string');
            expect(data.AUTH_MODE).to.be("");
            expect(data.UNLOCK_TIME).to.be.a('string');
            expect(data.UNLOCK_TIME).to.be("");
            expect(data.LAST_LOGIN).to.be.a('string');
            expect(data.LAST_LOGIN).to.be("");
            expect(data.START_DATE).to.be.a('string');
            expect(data.START_DATE).to.be("");
            expect(data.END_DATE).to.be.a('string');
            expect(data.END_DATE).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofUser', function() {
        it('should call getcofUser successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofUser call
          /*
          var opts = {};
          opts.fields = null;
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.getcofUser(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofUserById', function() {
        it('should call getcofUserById successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofUserById call and complete the assertions
          /*
          var cofUserId = 789;

          instance.getcofUserById(cofUserId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofUser);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.EMP_ID).to.be.a('string');
            expect(data.EMP_ID).to.be("");
            expect(data.NAME).to.be.a('string');
            expect(data.NAME).to.be("");
            expect(data.DESCRIPTION).to.be.a('string');
            expect(data.DESCRIPTION).to.be("");
            expect(data.CREATE_TIME).to.be.a('string');
            expect(data.CREATE_TIME).to.be("");
            expect(data.UPDATE_TIME).to.be.a('string');
            expect(data.UPDATE_TIME).to.be("");
            expect(data.EMAIL).to.be.a('string');
            expect(data.EMAIL).to.be("");
            expect(data.TENANT_ID).to.be.a('string');
            expect(data.TENANT_ID).to.be("");
            expect(data.PASSWORD).to.be.a('string');
            expect(data.PASSWORD).to.be("");
            expect(data.SALT).to.be.a('string');
            expect(data.SALT).to.be("");
            expect(data.STATUS).to.be.a('string');
            expect(data.STATUS).to.be("");
            expect(data.AUTH_MODE).to.be.a('string');
            expect(data.AUTH_MODE).to.be("");
            expect(data.UNLOCK_TIME).to.be.a('string');
            expect(data.UNLOCK_TIME).to.be("");
            expect(data.LAST_LOGIN).to.be.a('string');
            expect(data.LAST_LOGIN).to.be("");
            expect(data.START_DATE).to.be.a('string');
            expect(data.START_DATE).to.be("");
            expect(data.END_DATE).to.be.a('string');
            expect(data.END_DATE).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofUserCount', function() {
        it('should call getcofUserCount successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofUserCount call and complete the assertions
          /*
          var opts = {};
          opts.where = null;

          instance.getcofUserCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatecofUser', function() {
        it('should call updatecofUser successfully', function(done) {
          // TODO: uncomment, update parameter values for updatecofUser call
          /*
          var cofUserId = 789;
          var body = new XgeneCloud.CofUser();
          body.ID = "";
          body.EMP_ID = "";
          body.NAME = "";
          body.DESCRIPTION = "";
          body.CREATE_TIME = "";
          body.UPDATE_TIME = "";
          body.EMAIL = "";
          body.TENANT_ID = "";
          body.PASSWORD = "";
          body.SALT = "";
          body.STATUS = "";
          body.AUTH_MODE = "";
          body.UNLOCK_TIME = "";
          body.LAST_LOGIN = "";
          body.START_DATE = "";
          body.END_DATE = "";
          body.IS_FIXED = 0;

          instance.updatecofUser(cofUserId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatecofUser_0', function() {
        it('should call updatecofUser_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for updatecofUser_0 call
          /*
          var body = [new XgeneCloud.CofUser()];
          body[0].ID = "";
          body[0].EMP_ID = "";
          body[0].NAME = "";
          body[0].DESCRIPTION = "";
          body[0].CREATE_TIME = "";
          body[0].UPDATE_TIME = "";
          body[0].EMAIL = "";
          body[0].TENANT_ID = "";
          body[0].PASSWORD = "";
          body[0].SALT = "";
          body[0].STATUS = "";
          body[0].AUTH_MODE = "";
          body[0].UNLOCK_TIME = "";
          body[0].LAST_LOGIN = "";
          body[0].START_DATE = "";
          body[0].END_DATE = "";
          body[0].IS_FIXED = 0;

          instance.updatecofUser_0(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
