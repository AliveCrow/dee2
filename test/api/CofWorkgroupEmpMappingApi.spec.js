/*
 * XgeneCloud
 * Create APIs at the speed of your thoughts
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.XgeneCloud);
  }
}(this, function(expect, XgeneCloud) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new XgeneCloud.CofWorkgroupEmpMappingApi();
  });

  describe('(package)', function() {
    describe('CofWorkgroupEmpMappingApi', function() {
      describe('addcofWorkgroupEmpMapping', function() {
        it('should call addcofWorkgroupEmpMapping successfully', function(done) {
          // TODO: uncomment, update parameter values for addcofWorkgroupEmpMapping call
          /*
          var body = new XgeneCloud.CofWorkgroupEmpMapping();
          body.ID = "";
          body.EMP_ID = "";
          body.WORKGROUP_ID = "";
          body.IS_FIXED = 0;

          instance.addcofWorkgroupEmpMapping(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkcofWorkgroupEmpMappingInsert', function() {
        it('should call bulkcofWorkgroupEmpMappingInsert successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkcofWorkgroupEmpMappingInsert call
          /*
          var body = [new XgeneCloud.CofWorkgroupEmpMapping()];
          body[0].ID = "";
          body[0].EMP_ID = "";
          body[0].WORKGROUP_ID = "";
          body[0].IS_FIXED = 0;

          instance.bulkcofWorkgroupEmpMappingInsert(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('checkcofWorkgroupEmpMappingExists', function() {
        it('should call checkcofWorkgroupEmpMappingExists successfully', function(done) {
          // TODO: uncomment, update parameter values for checkcofWorkgroupEmpMappingExists call and complete the assertions
          /*
          var cofWorkgroupEmpMappingId = 789;

          instance.checkcofWorkgroupEmpMappingExists(cofWorkgroupEmpMappingId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('boolean');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofWorkgroupEmpMappingAggregate', function() {
        it('should call cofWorkgroupEmpMappingAggregate successfully', function(done) {
          // TODO: uncomment, update parameter values for cofWorkgroupEmpMappingAggregate call and complete the assertions
          /*
          var columnName = null;
          var fields = null;
          var func = null;
          var opts = {};
          opts.having = null;
          opts.fields2 = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofWorkgroupEmpMappingAggregate(columnName, fields, func, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofWorkgroupEmpMapping);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.EMP_ID).to.be.a('string');
            expect(data.EMP_ID).to.be("");
            expect(data.WORKGROUP_ID).to.be.a('string');
            expect(data.WORKGROUP_ID).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofWorkgroupEmpMappingDistinct', function() {
        it('should call cofWorkgroupEmpMappingDistinct successfully', function(done) {
          // TODO: uncomment, update parameter values for cofWorkgroupEmpMappingDistinct call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofWorkgroupEmpMappingDistinct(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofWorkgroupEmpMappingDistribution', function() {
        it('should call cofWorkgroupEmpMappingDistribution successfully', function(done) {
          // TODO: uncomment, update parameter values for cofWorkgroupEmpMappingDistribution call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.min = 789;
          opts.max = 789;
          opts.step = 789;
          opts.steps = 789;
          opts.func = "func_example";

          instance.cofWorkgroupEmpMappingDistribution(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofWorkgroupEmpMappingGroupByColumn', function() {
        it('should call cofWorkgroupEmpMappingGroupByColumn successfully', function(done) {
          // TODO: uncomment, update parameter values for cofWorkgroupEmpMappingGroupByColumn call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofWorkgroupEmpMappingGroupByColumn(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofWorkgroupEmpMapping);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.EMP_ID).to.be.a('string');
            expect(data.EMP_ID).to.be("");
            expect(data.WORKGROUP_ID).to.be.a('string');
            expect(data.WORKGROUP_ID).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletecofWorkgroupEmpMapping', function() {
        it('should call deletecofWorkgroupEmpMapping successfully', function(done) {
          // TODO: uncomment, update parameter values for deletecofWorkgroupEmpMapping call
          /*
          var cofWorkgroupEmpMappingId = 789;

          instance.deletecofWorkgroupEmpMapping(cofWorkgroupEmpMappingId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletecofWorkgroupEmpMapping_0', function() {
        it('should call deletecofWorkgroupEmpMapping_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for deletecofWorkgroupEmpMapping_0 call
          /*
          var body = [new XgeneCloud.CofWorkgroupEmpMapping()];
          body[0].ID = "";
          body[0].EMP_ID = "";
          body[0].WORKGROUP_ID = "";
          body[0].IS_FIXED = 0;

          instance.deletecofWorkgroupEmpMapping_0(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findOnecofWorkgroupEmpMapping', function() {
        it('should call findOnecofWorkgroupEmpMapping successfully', function(done) {
          // TODO: uncomment, update parameter values for findOnecofWorkgroupEmpMapping call and complete the assertions
          /*
          var opts = {};
          opts.fields = null;
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.findOnecofWorkgroupEmpMapping(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofWorkgroupEmpMapping);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.EMP_ID).to.be.a('string');
            expect(data.EMP_ID).to.be("");
            expect(data.WORKGROUP_ID).to.be.a('string');
            expect(data.WORKGROUP_ID).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofWorkgroupEmpMapping', function() {
        it('should call getcofWorkgroupEmpMapping successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofWorkgroupEmpMapping call
          /*
          var opts = {};
          opts.fields = null;
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.getcofWorkgroupEmpMapping(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofWorkgroupEmpMappingById', function() {
        it('should call getcofWorkgroupEmpMappingById successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofWorkgroupEmpMappingById call and complete the assertions
          /*
          var cofWorkgroupEmpMappingId = 789;

          instance.getcofWorkgroupEmpMappingById(cofWorkgroupEmpMappingId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofWorkgroupEmpMapping);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.EMP_ID).to.be.a('string');
            expect(data.EMP_ID).to.be("");
            expect(data.WORKGROUP_ID).to.be.a('string');
            expect(data.WORKGROUP_ID).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofWorkgroupEmpMappingCount', function() {
        it('should call getcofWorkgroupEmpMappingCount successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofWorkgroupEmpMappingCount call and complete the assertions
          /*
          var opts = {};
          opts.where = null;

          instance.getcofWorkgroupEmpMappingCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatecofWorkgroupEmpMapping', function() {
        it('should call updatecofWorkgroupEmpMapping successfully', function(done) {
          // TODO: uncomment, update parameter values for updatecofWorkgroupEmpMapping call
          /*
          var cofWorkgroupEmpMappingId = 789;
          var body = new XgeneCloud.CofWorkgroupEmpMapping();
          body.ID = "";
          body.EMP_ID = "";
          body.WORKGROUP_ID = "";
          body.IS_FIXED = 0;

          instance.updatecofWorkgroupEmpMapping(cofWorkgroupEmpMappingId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatecofWorkgroupEmpMapping_0', function() {
        it('should call updatecofWorkgroupEmpMapping_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for updatecofWorkgroupEmpMapping_0 call
          /*
          var body = [new XgeneCloud.CofWorkgroupEmpMapping()];
          body[0].ID = "";
          body[0].EMP_ID = "";
          body[0].WORKGROUP_ID = "";
          body[0].IS_FIXED = 0;

          instance.updatecofWorkgroupEmpMapping_0(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
