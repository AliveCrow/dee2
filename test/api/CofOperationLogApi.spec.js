/*
 * XgeneCloud
 * Create APIs at the speed of your thoughts
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.XgeneCloud);
  }
}(this, function(expect, XgeneCloud) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new XgeneCloud.CofOperationLogApi();
  });

  describe('(package)', function() {
    describe('CofOperationLogApi', function() {
      describe('addcofOperationLog', function() {
        it('should call addcofOperationLog successfully', function(done) {
          // TODO: uncomment, update parameter values for addcofOperationLog call
          /*
          var body = new XgeneCloud.CofOperationLog();
          body.ID = "";
          body.OPERATOR_ID = "";
          body.OPERATOR_NAME = "";
          body.OPERATE_TYPE = 0;
          body.OPERATE_DATE = "";
          body.TARGET_TYPE = "";
          body.TARGET_MODEL_ID = "";
          body.TARGET_MODEL_NAME = "";
          body.MESSAGE = "";
          body.TENANT_ID = "";

          instance.addcofOperationLog(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkcofOperationLogInsert', function() {
        it('should call bulkcofOperationLogInsert successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkcofOperationLogInsert call
          /*
          var body = [new XgeneCloud.CofOperationLog()];
          body[0].ID = "";
          body[0].OPERATOR_ID = "";
          body[0].OPERATOR_NAME = "";
          body[0].OPERATE_TYPE = 0;
          body[0].OPERATE_DATE = "";
          body[0].TARGET_TYPE = "";
          body[0].TARGET_MODEL_ID = "";
          body[0].TARGET_MODEL_NAME = "";
          body[0].MESSAGE = "";
          body[0].TENANT_ID = "";

          instance.bulkcofOperationLogInsert(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('checkcofOperationLogExists', function() {
        it('should call checkcofOperationLogExists successfully', function(done) {
          // TODO: uncomment, update parameter values for checkcofOperationLogExists call and complete the assertions
          /*
          var cofOperationLogId = 789;

          instance.checkcofOperationLogExists(cofOperationLogId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('boolean');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofOperationLogAggregate', function() {
        it('should call cofOperationLogAggregate successfully', function(done) {
          // TODO: uncomment, update parameter values for cofOperationLogAggregate call and complete the assertions
          /*
          var columnName = null;
          var fields = null;
          var func = null;
          var opts = {};
          opts.having = null;
          opts.fields2 = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofOperationLogAggregate(columnName, fields, func, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofOperationLog);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.OPERATOR_ID).to.be.a('string');
            expect(data.OPERATOR_ID).to.be("");
            expect(data.OPERATOR_NAME).to.be.a('string');
            expect(data.OPERATOR_NAME).to.be("");
            expect(data.OPERATE_TYPE).to.be.a('number');
            expect(data.OPERATE_TYPE).to.be(0);
            expect(data.OPERATE_DATE).to.be.a('string');
            expect(data.OPERATE_DATE).to.be("");
            expect(data.TARGET_TYPE).to.be.a('string');
            expect(data.TARGET_TYPE).to.be("");
            expect(data.TARGET_MODEL_ID).to.be.a('string');
            expect(data.TARGET_MODEL_ID).to.be("");
            expect(data.TARGET_MODEL_NAME).to.be.a('string');
            expect(data.TARGET_MODEL_NAME).to.be("");
            expect(data.MESSAGE).to.be.a('string');
            expect(data.MESSAGE).to.be("");
            expect(data.TENANT_ID).to.be.a('string');
            expect(data.TENANT_ID).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofOperationLogDistinct', function() {
        it('should call cofOperationLogDistinct successfully', function(done) {
          // TODO: uncomment, update parameter values for cofOperationLogDistinct call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofOperationLogDistinct(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofOperationLogDistribution', function() {
        it('should call cofOperationLogDistribution successfully', function(done) {
          // TODO: uncomment, update parameter values for cofOperationLogDistribution call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.min = 789;
          opts.max = 789;
          opts.step = 789;
          opts.steps = 789;
          opts.func = "func_example";

          instance.cofOperationLogDistribution(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofOperationLogGroupByColumn', function() {
        it('should call cofOperationLogGroupByColumn successfully', function(done) {
          // TODO: uncomment, update parameter values for cofOperationLogGroupByColumn call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofOperationLogGroupByColumn(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofOperationLog);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.OPERATOR_ID).to.be.a('string');
            expect(data.OPERATOR_ID).to.be("");
            expect(data.OPERATOR_NAME).to.be.a('string');
            expect(data.OPERATOR_NAME).to.be("");
            expect(data.OPERATE_TYPE).to.be.a('number');
            expect(data.OPERATE_TYPE).to.be(0);
            expect(data.OPERATE_DATE).to.be.a('string');
            expect(data.OPERATE_DATE).to.be("");
            expect(data.TARGET_TYPE).to.be.a('string');
            expect(data.TARGET_TYPE).to.be("");
            expect(data.TARGET_MODEL_ID).to.be.a('string');
            expect(data.TARGET_MODEL_ID).to.be("");
            expect(data.TARGET_MODEL_NAME).to.be.a('string');
            expect(data.TARGET_MODEL_NAME).to.be("");
            expect(data.MESSAGE).to.be.a('string');
            expect(data.MESSAGE).to.be("");
            expect(data.TENANT_ID).to.be.a('string');
            expect(data.TENANT_ID).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletecofOperationLog', function() {
        it('should call deletecofOperationLog successfully', function(done) {
          // TODO: uncomment, update parameter values for deletecofOperationLog call
          /*
          var cofOperationLogId = 789;

          instance.deletecofOperationLog(cofOperationLogId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletecofOperationLog_0', function() {
        it('should call deletecofOperationLog_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for deletecofOperationLog_0 call
          /*
          var body = [new XgeneCloud.CofOperationLog()];
          body[0].ID = "";
          body[0].OPERATOR_ID = "";
          body[0].OPERATOR_NAME = "";
          body[0].OPERATE_TYPE = 0;
          body[0].OPERATE_DATE = "";
          body[0].TARGET_TYPE = "";
          body[0].TARGET_MODEL_ID = "";
          body[0].TARGET_MODEL_NAME = "";
          body[0].MESSAGE = "";
          body[0].TENANT_ID = "";

          instance.deletecofOperationLog_0(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findOnecofOperationLog', function() {
        it('should call findOnecofOperationLog successfully', function(done) {
          // TODO: uncomment, update parameter values for findOnecofOperationLog call and complete the assertions
          /*
          var opts = {};
          opts.fields = null;
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.findOnecofOperationLog(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofOperationLog);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.OPERATOR_ID).to.be.a('string');
            expect(data.OPERATOR_ID).to.be("");
            expect(data.OPERATOR_NAME).to.be.a('string');
            expect(data.OPERATOR_NAME).to.be("");
            expect(data.OPERATE_TYPE).to.be.a('number');
            expect(data.OPERATE_TYPE).to.be(0);
            expect(data.OPERATE_DATE).to.be.a('string');
            expect(data.OPERATE_DATE).to.be("");
            expect(data.TARGET_TYPE).to.be.a('string');
            expect(data.TARGET_TYPE).to.be("");
            expect(data.TARGET_MODEL_ID).to.be.a('string');
            expect(data.TARGET_MODEL_ID).to.be("");
            expect(data.TARGET_MODEL_NAME).to.be.a('string');
            expect(data.TARGET_MODEL_NAME).to.be("");
            expect(data.MESSAGE).to.be.a('string');
            expect(data.MESSAGE).to.be("");
            expect(data.TENANT_ID).to.be.a('string');
            expect(data.TENANT_ID).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofOperationLog', function() {
        it('should call getcofOperationLog successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofOperationLog call
          /*
          var opts = {};
          opts.fields = null;
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.getcofOperationLog(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofOperationLogById', function() {
        it('should call getcofOperationLogById successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofOperationLogById call and complete the assertions
          /*
          var cofOperationLogId = 789;

          instance.getcofOperationLogById(cofOperationLogId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofOperationLog);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.OPERATOR_ID).to.be.a('string');
            expect(data.OPERATOR_ID).to.be("");
            expect(data.OPERATOR_NAME).to.be.a('string');
            expect(data.OPERATOR_NAME).to.be("");
            expect(data.OPERATE_TYPE).to.be.a('number');
            expect(data.OPERATE_TYPE).to.be(0);
            expect(data.OPERATE_DATE).to.be.a('string');
            expect(data.OPERATE_DATE).to.be("");
            expect(data.TARGET_TYPE).to.be.a('string');
            expect(data.TARGET_TYPE).to.be("");
            expect(data.TARGET_MODEL_ID).to.be.a('string');
            expect(data.TARGET_MODEL_ID).to.be("");
            expect(data.TARGET_MODEL_NAME).to.be.a('string');
            expect(data.TARGET_MODEL_NAME).to.be("");
            expect(data.MESSAGE).to.be.a('string');
            expect(data.MESSAGE).to.be("");
            expect(data.TENANT_ID).to.be.a('string');
            expect(data.TENANT_ID).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofOperationLogCount', function() {
        it('should call getcofOperationLogCount successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofOperationLogCount call and complete the assertions
          /*
          var opts = {};
          opts.where = null;

          instance.getcofOperationLogCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatecofOperationLog', function() {
        it('should call updatecofOperationLog successfully', function(done) {
          // TODO: uncomment, update parameter values for updatecofOperationLog call
          /*
          var cofOperationLogId = 789;
          var body = new XgeneCloud.CofOperationLog();
          body.ID = "";
          body.OPERATOR_ID = "";
          body.OPERATOR_NAME = "";
          body.OPERATE_TYPE = 0;
          body.OPERATE_DATE = "";
          body.TARGET_TYPE = "";
          body.TARGET_MODEL_ID = "";
          body.TARGET_MODEL_NAME = "";
          body.MESSAGE = "";
          body.TENANT_ID = "";

          instance.updatecofOperationLog(cofOperationLogId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatecofOperationLog_0', function() {
        it('should call updatecofOperationLog_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for updatecofOperationLog_0 call
          /*
          var body = [new XgeneCloud.CofOperationLog()];
          body[0].ID = "";
          body[0].OPERATOR_ID = "";
          body[0].OPERATOR_NAME = "";
          body[0].OPERATE_TYPE = 0;
          body[0].OPERATE_DATE = "";
          body[0].TARGET_TYPE = "";
          body[0].TARGET_MODEL_ID = "";
          body[0].TARGET_MODEL_NAME = "";
          body[0].MESSAGE = "";
          body[0].TENANT_ID = "";

          instance.updatecofOperationLog_0(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
