/*
 * XgeneCloud
 * Create APIs at the speed of your thoughts
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.XgeneCloud);
  }
}(this, function(expect, XgeneCloud) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new XgeneCloud.CofDictTypeI18nApi();
  });

  describe('(package)', function() {
    describe('CofDictTypeI18nApi', function() {
      describe('addcofDictTypeI18n', function() {
        it('should call addcofDictTypeI18n successfully', function(done) {
          // TODO: uncomment, update parameter values for addcofDictTypeI18n call
          /*
          var body = new XgeneCloud.CofDictTypeI18n();
          body.ID = "";
          body.DICT_TYPE_ID = "";
          body.LOCALE = "";
          body.DICT_TYPE_NAME = "";
          body.IS_FIXED = 0;

          instance.addcofDictTypeI18n(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkcofDictTypeI18nInsert', function() {
        it('should call bulkcofDictTypeI18nInsert successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkcofDictTypeI18nInsert call
          /*
          var body = [new XgeneCloud.CofDictTypeI18n()];
          body[0].ID = "";
          body[0].DICT_TYPE_ID = "";
          body[0].LOCALE = "";
          body[0].DICT_TYPE_NAME = "";
          body[0].IS_FIXED = 0;

          instance.bulkcofDictTypeI18nInsert(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('checkcofDictTypeI18nExists', function() {
        it('should call checkcofDictTypeI18nExists successfully', function(done) {
          // TODO: uncomment, update parameter values for checkcofDictTypeI18nExists call and complete the assertions
          /*
          var cofDictTypeI18nId = 789;

          instance.checkcofDictTypeI18nExists(cofDictTypeI18nId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('boolean');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofDictTypeI18nAggregate', function() {
        it('should call cofDictTypeI18nAggregate successfully', function(done) {
          // TODO: uncomment, update parameter values for cofDictTypeI18nAggregate call and complete the assertions
          /*
          var columnName = null;
          var fields = null;
          var func = null;
          var opts = {};
          opts.having = null;
          opts.fields2 = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofDictTypeI18nAggregate(columnName, fields, func, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofDictTypeI18n);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.DICT_TYPE_ID).to.be.a('string');
            expect(data.DICT_TYPE_ID).to.be("");
            expect(data.LOCALE).to.be.a('string');
            expect(data.LOCALE).to.be("");
            expect(data.DICT_TYPE_NAME).to.be.a('string');
            expect(data.DICT_TYPE_NAME).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofDictTypeI18nDistinct', function() {
        it('should call cofDictTypeI18nDistinct successfully', function(done) {
          // TODO: uncomment, update parameter values for cofDictTypeI18nDistinct call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofDictTypeI18nDistinct(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofDictTypeI18nDistribution', function() {
        it('should call cofDictTypeI18nDistribution successfully', function(done) {
          // TODO: uncomment, update parameter values for cofDictTypeI18nDistribution call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.min = 789;
          opts.max = 789;
          opts.step = 789;
          opts.steps = 789;
          opts.func = "func_example";

          instance.cofDictTypeI18nDistribution(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofDictTypeI18nGroupByColumn', function() {
        it('should call cofDictTypeI18nGroupByColumn successfully', function(done) {
          // TODO: uncomment, update parameter values for cofDictTypeI18nGroupByColumn call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofDictTypeI18nGroupByColumn(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofDictTypeI18n);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.DICT_TYPE_ID).to.be.a('string');
            expect(data.DICT_TYPE_ID).to.be("");
            expect(data.LOCALE).to.be.a('string');
            expect(data.LOCALE).to.be("");
            expect(data.DICT_TYPE_NAME).to.be.a('string');
            expect(data.DICT_TYPE_NAME).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletecofDictTypeI18n', function() {
        it('should call deletecofDictTypeI18n successfully', function(done) {
          // TODO: uncomment, update parameter values for deletecofDictTypeI18n call
          /*
          var cofDictTypeI18nId = 789;

          instance.deletecofDictTypeI18n(cofDictTypeI18nId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletecofDictTypeI18n_0', function() {
        it('should call deletecofDictTypeI18n_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for deletecofDictTypeI18n_0 call
          /*
          var body = [new XgeneCloud.CofDictTypeI18n()];
          body[0].ID = "";
          body[0].DICT_TYPE_ID = "";
          body[0].LOCALE = "";
          body[0].DICT_TYPE_NAME = "";
          body[0].IS_FIXED = 0;

          instance.deletecofDictTypeI18n_0(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findOnecofDictTypeI18n', function() {
        it('should call findOnecofDictTypeI18n successfully', function(done) {
          // TODO: uncomment, update parameter values for findOnecofDictTypeI18n call and complete the assertions
          /*
          var opts = {};
          opts.fields = null;
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.findOnecofDictTypeI18n(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofDictTypeI18n);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.DICT_TYPE_ID).to.be.a('string');
            expect(data.DICT_TYPE_ID).to.be("");
            expect(data.LOCALE).to.be.a('string');
            expect(data.LOCALE).to.be("");
            expect(data.DICT_TYPE_NAME).to.be.a('string');
            expect(data.DICT_TYPE_NAME).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofDictTypeI18n', function() {
        it('should call getcofDictTypeI18n successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofDictTypeI18n call
          /*
          var opts = {};
          opts.fields = null;
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.getcofDictTypeI18n(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofDictTypeI18nById', function() {
        it('should call getcofDictTypeI18nById successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofDictTypeI18nById call and complete the assertions
          /*
          var cofDictTypeI18nId = 789;

          instance.getcofDictTypeI18nById(cofDictTypeI18nId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofDictTypeI18n);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.DICT_TYPE_ID).to.be.a('string');
            expect(data.DICT_TYPE_ID).to.be("");
            expect(data.LOCALE).to.be.a('string');
            expect(data.LOCALE).to.be("");
            expect(data.DICT_TYPE_NAME).to.be.a('string');
            expect(data.DICT_TYPE_NAME).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofDictTypeI18nCount', function() {
        it('should call getcofDictTypeI18nCount successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofDictTypeI18nCount call and complete the assertions
          /*
          var opts = {};
          opts.where = null;

          instance.getcofDictTypeI18nCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatecofDictTypeI18n', function() {
        it('should call updatecofDictTypeI18n successfully', function(done) {
          // TODO: uncomment, update parameter values for updatecofDictTypeI18n call
          /*
          var cofDictTypeI18nId = 789;
          var body = new XgeneCloud.CofDictTypeI18n();
          body.ID = "";
          body.DICT_TYPE_ID = "";
          body.LOCALE = "";
          body.DICT_TYPE_NAME = "";
          body.IS_FIXED = 0;

          instance.updatecofDictTypeI18n(cofDictTypeI18nId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatecofDictTypeI18n_0', function() {
        it('should call updatecofDictTypeI18n_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for updatecofDictTypeI18n_0 call
          /*
          var body = [new XgeneCloud.CofDictTypeI18n()];
          body[0].ID = "";
          body[0].DICT_TYPE_ID = "";
          body[0].LOCALE = "";
          body[0].DICT_TYPE_NAME = "";
          body[0].IS_FIXED = 0;

          instance.updatecofDictTypeI18n_0(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
