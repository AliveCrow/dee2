/*
 * XgeneCloud
 * Create APIs at the speed of your thoughts
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.XgeneCloud);
  }
}(this, function(expect, XgeneCloud) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new XgeneCloud.AuthenticationApi();
  });

  describe('(package)', function() {
    describe('AuthenticationApi', function() {
      describe('emailValidate', function() {
        it('should call emailValidate successfully', function(done) {
          // TODO: uncomment, update parameter values for emailValidate call
          /*
          var tokenId = "tokenId_example";

          instance.emailValidate(tokenId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('facebookAuthentication', function() {
        it('should call facebookAuthentication successfully', function(done) {
          // TODO: uncomment facebookAuthentication call
          /*

          instance.facebookAuthentication(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('facebookAuthenticationCallback', function() {
        it('should call facebookAuthenticationCallback successfully', function(done) {
          // TODO: uncomment facebookAuthenticationCallback call
          /*

          instance.facebookAuthenticationCallback(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('googleAuthentication', function() {
        it('should call googleAuthentication successfully', function(done) {
          // TODO: uncomment googleAuthentication call
          /*

          instance.googleAuthentication(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('googleAuthenticationCallback', function() {
        it('should call googleAuthenticationCallback successfully', function(done) {
          // TODO: uncomment googleAuthenticationCallback call
          /*

          instance.googleAuthenticationCallback(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('login', function() {
        it('should call login successfully', function(done) {
          // TODO: uncomment, update parameter values for login call and complete the assertions
          /*
          var body = new XgeneCloud.UserAuth();
          body.email = "test@xgenecloud.com";
          body.password = "password";

          instance.login(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.User);
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("test@xgenecloud.com");
            expect(data.password).to.be.a('string');
            expect(data.password).to.be("password");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.firstname).to.be.a('string');
            expect(data.firstname).to.be("FirstName");
            expect(data.lastname).to.be.a('string');
            expect(data.lastname).to.be("LastName");
            expect(data.roles).to.be.a(Object);
            expect(data.roles).to.be();
            expect(data.createdAt).to.be.a('string');
            expect(data.createdAt).to.be("");
            expect(data.updatedAt).to.be.a('string');
            expect(data.updatedAt).to.be("");
            expect(data.emailVerified).to.be.a('boolean');
            expect(data.emailVerified).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('logout', function() {
        it('should call logout successfully', function(done) {
          // TODO: uncomment logout call
          /*

          instance.logout(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('passwordChange', function() {
        it('should call passwordChange successfully', function(done) {
          // TODO: uncomment, update parameter values for passwordChange call
          /*
          var body = new XgeneCloud.Body2();
          body.currentPassword = "password";
          body.newPassword = "newPassword";

          instance.passwordChange(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('passwordForgot', function() {
        it('should call passwordForgot successfully', function(done) {
          // TODO: uncomment, update parameter values for passwordForgot call and complete the assertions
          /*
          var body = new XgeneCloud.Body();
          body.email = "test@xgenecloud.com";

          instance.passwordForgot(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('boolean');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('passwordReset', function() {
        it('should call passwordReset successfully', function(done) {
          // TODO: uncomment, update parameter values for passwordReset call
          /*
          var tokenId = "tokenId_example";
          var body = new XgeneCloud.Body1();
          body.password = "password";

          instance.passwordReset(tokenId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('passwordResetTokenValidate', function() {
        it('should call passwordResetTokenValidate successfully', function(done) {
          // TODO: uncomment, update parameter values for passwordResetTokenValidate call
          /*
          var tokenId = "tokenId_example";

          instance.passwordResetTokenValidate(tokenId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('signup', function() {
        it('should call signup successfully', function(done) {
          // TODO: uncomment, update parameter values for signup call and complete the assertions
          /*
          var body = new XgeneCloud.User();
          body.email = "test@xgenecloud.com";
          body.password = "password";
          body.firstname = "FirstName";
          body.lastname = "LastName";

          instance.signup(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.User);
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("test@xgenecloud.com");
            expect(data.password).to.be.a('string');
            expect(data.password).to.be("password");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.firstname).to.be.a('string');
            expect(data.firstname).to.be("FirstName");
            expect(data.lastname).to.be.a('string');
            expect(data.lastname).to.be("LastName");
            expect(data.roles).to.be.a(Object);
            expect(data.roles).to.be();
            expect(data.createdAt).to.be.a('string');
            expect(data.createdAt).to.be("");
            expect(data.updatedAt).to.be.a('string');
            expect(data.updatedAt).to.be("");
            expect(data.emailVerified).to.be.a('boolean');
            expect(data.emailVerified).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateUserDetails', function() {
        it('should call updateUserDetails successfully', function(done) {
          // TODO: uncomment, update parameter values for updateUserDetails call
          /*
          var body = new XgeneCloud.User();
          body.email = "test@xgenecloud.com";
          body.password = "password";
          body.firstname = "FirstName";
          body.lastname = "LastName";

          instance.updateUserDetails(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userDetails', function() {
        it('should call userDetails successfully', function(done) {
          // TODO: uncomment userDetails call
          /*

          instance.userDetails(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
