/*
 * XgeneCloud
 * Create APIs at the speed of your thoughts
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.XgeneCloud);
  }
}(this, function(expect, XgeneCloud) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new XgeneCloud.CofOrgEmpMappingApi();
  });

  describe('(package)', function() {
    describe('CofOrgEmpMappingApi', function() {
      describe('addcofOrgEmpMapping', function() {
        it('should call addcofOrgEmpMapping successfully', function(done) {
          // TODO: uncomment, update parameter values for addcofOrgEmpMapping call
          /*
          var body = new XgeneCloud.CofOrgEmpMapping();
          body.ID = "";
          body.ORG_ID = "";
          body.EMP_ID = "";
          body.IS_FIXED = 0;

          instance.addcofOrgEmpMapping(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkcofOrgEmpMappingInsert', function() {
        it('should call bulkcofOrgEmpMappingInsert successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkcofOrgEmpMappingInsert call
          /*
          var body = [new XgeneCloud.CofOrgEmpMapping()];
          body[0].ID = "";
          body[0].ORG_ID = "";
          body[0].EMP_ID = "";
          body[0].IS_FIXED = 0;

          instance.bulkcofOrgEmpMappingInsert(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('checkcofOrgEmpMappingExists', function() {
        it('should call checkcofOrgEmpMappingExists successfully', function(done) {
          // TODO: uncomment, update parameter values for checkcofOrgEmpMappingExists call and complete the assertions
          /*
          var cofOrgEmpMappingId = 789;

          instance.checkcofOrgEmpMappingExists(cofOrgEmpMappingId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('boolean');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofOrgEmpMappingAggregate', function() {
        it('should call cofOrgEmpMappingAggregate successfully', function(done) {
          // TODO: uncomment, update parameter values for cofOrgEmpMappingAggregate call and complete the assertions
          /*
          var columnName = null;
          var fields = null;
          var func = null;
          var opts = {};
          opts.having = null;
          opts.fields2 = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofOrgEmpMappingAggregate(columnName, fields, func, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofOrgEmpMapping);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.ORG_ID).to.be.a('string');
            expect(data.ORG_ID).to.be("");
            expect(data.EMP_ID).to.be.a('string');
            expect(data.EMP_ID).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofOrgEmpMappingDistinct', function() {
        it('should call cofOrgEmpMappingDistinct successfully', function(done) {
          // TODO: uncomment, update parameter values for cofOrgEmpMappingDistinct call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofOrgEmpMappingDistinct(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofOrgEmpMappingDistribution', function() {
        it('should call cofOrgEmpMappingDistribution successfully', function(done) {
          // TODO: uncomment, update parameter values for cofOrgEmpMappingDistribution call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.min = 789;
          opts.max = 789;
          opts.step = 789;
          opts.steps = 789;
          opts.func = "func_example";

          instance.cofOrgEmpMappingDistribution(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofOrgEmpMappingGroupByColumn', function() {
        it('should call cofOrgEmpMappingGroupByColumn successfully', function(done) {
          // TODO: uncomment, update parameter values for cofOrgEmpMappingGroupByColumn call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofOrgEmpMappingGroupByColumn(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofOrgEmpMapping);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.ORG_ID).to.be.a('string');
            expect(data.ORG_ID).to.be("");
            expect(data.EMP_ID).to.be.a('string');
            expect(data.EMP_ID).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletecofOrgEmpMapping', function() {
        it('should call deletecofOrgEmpMapping successfully', function(done) {
          // TODO: uncomment, update parameter values for deletecofOrgEmpMapping call
          /*
          var cofOrgEmpMappingId = 789;

          instance.deletecofOrgEmpMapping(cofOrgEmpMappingId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletecofOrgEmpMapping_0', function() {
        it('should call deletecofOrgEmpMapping_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for deletecofOrgEmpMapping_0 call
          /*
          var body = [new XgeneCloud.CofOrgEmpMapping()];
          body[0].ID = "";
          body[0].ORG_ID = "";
          body[0].EMP_ID = "";
          body[0].IS_FIXED = 0;

          instance.deletecofOrgEmpMapping_0(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findOnecofOrgEmpMapping', function() {
        it('should call findOnecofOrgEmpMapping successfully', function(done) {
          // TODO: uncomment, update parameter values for findOnecofOrgEmpMapping call and complete the assertions
          /*
          var opts = {};
          opts.fields = null;
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.findOnecofOrgEmpMapping(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofOrgEmpMapping);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.ORG_ID).to.be.a('string');
            expect(data.ORG_ID).to.be("");
            expect(data.EMP_ID).to.be.a('string');
            expect(data.EMP_ID).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofOrgEmpMapping', function() {
        it('should call getcofOrgEmpMapping successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofOrgEmpMapping call
          /*
          var opts = {};
          opts.fields = null;
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.getcofOrgEmpMapping(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofOrgEmpMappingById', function() {
        it('should call getcofOrgEmpMappingById successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofOrgEmpMappingById call and complete the assertions
          /*
          var cofOrgEmpMappingId = 789;

          instance.getcofOrgEmpMappingById(cofOrgEmpMappingId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofOrgEmpMapping);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.ORG_ID).to.be.a('string');
            expect(data.ORG_ID).to.be("");
            expect(data.EMP_ID).to.be.a('string');
            expect(data.EMP_ID).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofOrgEmpMappingCount', function() {
        it('should call getcofOrgEmpMappingCount successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofOrgEmpMappingCount call and complete the assertions
          /*
          var opts = {};
          opts.where = null;

          instance.getcofOrgEmpMappingCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatecofOrgEmpMapping', function() {
        it('should call updatecofOrgEmpMapping successfully', function(done) {
          // TODO: uncomment, update parameter values for updatecofOrgEmpMapping call
          /*
          var cofOrgEmpMappingId = 789;
          var body = new XgeneCloud.CofOrgEmpMapping();
          body.ID = "";
          body.ORG_ID = "";
          body.EMP_ID = "";
          body.IS_FIXED = 0;

          instance.updatecofOrgEmpMapping(cofOrgEmpMappingId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatecofOrgEmpMapping_0', function() {
        it('should call updatecofOrgEmpMapping_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for updatecofOrgEmpMapping_0 call
          /*
          var body = [new XgeneCloud.CofOrgEmpMapping()];
          body[0].ID = "";
          body[0].ORG_ID = "";
          body[0].EMP_ID = "";
          body[0].IS_FIXED = 0;

          instance.updatecofOrgEmpMapping_0(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
