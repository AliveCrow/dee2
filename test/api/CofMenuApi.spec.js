/*
 * XgeneCloud
 * Create APIs at the speed of your thoughts
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.XgeneCloud);
  }
}(this, function(expect, XgeneCloud) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new XgeneCloud.CofMenuApi();
  });

  describe('(package)', function() {
    describe('CofMenuApi', function() {
      describe('addcofMenu', function() {
        it('should call addcofMenu successfully', function(done) {
          // TODO: uncomment, update parameter values for addcofMenu call
          /*
          var body = new XgeneCloud.CofMenu();
          body.ID = "";
          body.GROUP_ID = "";
          body.NAME = "";
          body.CODE = "";
          body.DESCRIPTION = "";
          body.CREATE_TIME = "";
          body.UPDATE_TIME = "";
          body.TENANT_ID = "";
          body.PARENT_ID = "";
          body.SORT_NO = 0;
          body.IS_LEAF = 0;
          body.TREE_LEVEL = 0;
          body.SEQ = "";
          body.IS_FIXED = 0;

          instance.addcofMenu(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkcofMenuInsert', function() {
        it('should call bulkcofMenuInsert successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkcofMenuInsert call
          /*
          var body = [new XgeneCloud.CofMenu()];
          body[0].ID = "";
          body[0].GROUP_ID = "";
          body[0].NAME = "";
          body[0].CODE = "";
          body[0].DESCRIPTION = "";
          body[0].CREATE_TIME = "";
          body[0].UPDATE_TIME = "";
          body[0].TENANT_ID = "";
          body[0].PARENT_ID = "";
          body[0].SORT_NO = 0;
          body[0].IS_LEAF = 0;
          body[0].TREE_LEVEL = 0;
          body[0].SEQ = "";
          body[0].IS_FIXED = 0;

          instance.bulkcofMenuInsert(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('checkcofMenuExists', function() {
        it('should call checkcofMenuExists successfully', function(done) {
          // TODO: uncomment, update parameter values for checkcofMenuExists call and complete the assertions
          /*
          var cofMenuId = 789;

          instance.checkcofMenuExists(cofMenuId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('boolean');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofMenuAggregate', function() {
        it('should call cofMenuAggregate successfully', function(done) {
          // TODO: uncomment, update parameter values for cofMenuAggregate call and complete the assertions
          /*
          var columnName = null;
          var fields = null;
          var func = null;
          var opts = {};
          opts.having = null;
          opts.fields2 = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofMenuAggregate(columnName, fields, func, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofMenu);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.GROUP_ID).to.be.a('string');
            expect(data.GROUP_ID).to.be("");
            expect(data.NAME).to.be.a('string');
            expect(data.NAME).to.be("");
            expect(data.CODE).to.be.a('string');
            expect(data.CODE).to.be("");
            expect(data.DESCRIPTION).to.be.a('string');
            expect(data.DESCRIPTION).to.be("");
            expect(data.CREATE_TIME).to.be.a('string');
            expect(data.CREATE_TIME).to.be("");
            expect(data.UPDATE_TIME).to.be.a('string');
            expect(data.UPDATE_TIME).to.be("");
            expect(data.TENANT_ID).to.be.a('string');
            expect(data.TENANT_ID).to.be("");
            expect(data.PARENT_ID).to.be.a('string');
            expect(data.PARENT_ID).to.be("");
            expect(data.SORT_NO).to.be.a('number');
            expect(data.SORT_NO).to.be(0);
            expect(data.IS_LEAF).to.be.a('number');
            expect(data.IS_LEAF).to.be(0);
            expect(data.TREE_LEVEL).to.be.a('number');
            expect(data.TREE_LEVEL).to.be(0);
            expect(data.SEQ).to.be.a('string');
            expect(data.SEQ).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofMenuDistinct', function() {
        it('should call cofMenuDistinct successfully', function(done) {
          // TODO: uncomment, update parameter values for cofMenuDistinct call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofMenuDistinct(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofMenuDistribution', function() {
        it('should call cofMenuDistribution successfully', function(done) {
          // TODO: uncomment, update parameter values for cofMenuDistribution call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.min = 789;
          opts.max = 789;
          opts.step = 789;
          opts.steps = 789;
          opts.func = "func_example";

          instance.cofMenuDistribution(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cofMenuGroupByColumn', function() {
        it('should call cofMenuGroupByColumn successfully', function(done) {
          // TODO: uncomment, update parameter values for cofMenuGroupByColumn call and complete the assertions
          /*
          var columnName = null;
          var opts = {};
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.cofMenuGroupByColumn(columnName, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofMenu);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.GROUP_ID).to.be.a('string');
            expect(data.GROUP_ID).to.be("");
            expect(data.NAME).to.be.a('string');
            expect(data.NAME).to.be("");
            expect(data.CODE).to.be.a('string');
            expect(data.CODE).to.be("");
            expect(data.DESCRIPTION).to.be.a('string');
            expect(data.DESCRIPTION).to.be("");
            expect(data.CREATE_TIME).to.be.a('string');
            expect(data.CREATE_TIME).to.be("");
            expect(data.UPDATE_TIME).to.be.a('string');
            expect(data.UPDATE_TIME).to.be("");
            expect(data.TENANT_ID).to.be.a('string');
            expect(data.TENANT_ID).to.be("");
            expect(data.PARENT_ID).to.be.a('string');
            expect(data.PARENT_ID).to.be("");
            expect(data.SORT_NO).to.be.a('number');
            expect(data.SORT_NO).to.be(0);
            expect(data.IS_LEAF).to.be.a('number');
            expect(data.IS_LEAF).to.be(0);
            expect(data.TREE_LEVEL).to.be.a('number');
            expect(data.TREE_LEVEL).to.be(0);
            expect(data.SEQ).to.be.a('string');
            expect(data.SEQ).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletecofMenu', function() {
        it('should call deletecofMenu successfully', function(done) {
          // TODO: uncomment, update parameter values for deletecofMenu call
          /*
          var cofMenuId = 789;

          instance.deletecofMenu(cofMenuId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletecofMenu_0', function() {
        it('should call deletecofMenu_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for deletecofMenu_0 call
          /*
          var body = [new XgeneCloud.CofMenu()];
          body[0].ID = "";
          body[0].GROUP_ID = "";
          body[0].NAME = "";
          body[0].CODE = "";
          body[0].DESCRIPTION = "";
          body[0].CREATE_TIME = "";
          body[0].UPDATE_TIME = "";
          body[0].TENANT_ID = "";
          body[0].PARENT_ID = "";
          body[0].SORT_NO = 0;
          body[0].IS_LEAF = 0;
          body[0].TREE_LEVEL = 0;
          body[0].SEQ = "";
          body[0].IS_FIXED = 0;

          instance.deletecofMenu_0(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findOnecofMenu', function() {
        it('should call findOnecofMenu successfully', function(done) {
          // TODO: uncomment, update parameter values for findOnecofMenu call and complete the assertions
          /*
          var opts = {};
          opts.fields = null;
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.findOnecofMenu(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofMenu);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.GROUP_ID).to.be.a('string');
            expect(data.GROUP_ID).to.be("");
            expect(data.NAME).to.be.a('string');
            expect(data.NAME).to.be("");
            expect(data.CODE).to.be.a('string');
            expect(data.CODE).to.be("");
            expect(data.DESCRIPTION).to.be.a('string');
            expect(data.DESCRIPTION).to.be("");
            expect(data.CREATE_TIME).to.be.a('string');
            expect(data.CREATE_TIME).to.be("");
            expect(data.UPDATE_TIME).to.be.a('string');
            expect(data.UPDATE_TIME).to.be("");
            expect(data.TENANT_ID).to.be.a('string');
            expect(data.TENANT_ID).to.be("");
            expect(data.PARENT_ID).to.be.a('string');
            expect(data.PARENT_ID).to.be("");
            expect(data.SORT_NO).to.be.a('number');
            expect(data.SORT_NO).to.be(0);
            expect(data.IS_LEAF).to.be.a('number');
            expect(data.IS_LEAF).to.be(0);
            expect(data.TREE_LEVEL).to.be.a('number');
            expect(data.TREE_LEVEL).to.be(0);
            expect(data.SEQ).to.be.a('string');
            expect(data.SEQ).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofMenu', function() {
        it('should call getcofMenu successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofMenu call
          /*
          var opts = {};
          opts.fields = null;
          opts.where = null;
          opts.limit = 789;
          opts.offset = 789;
          opts.sort = "sort_example";

          instance.getcofMenu(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofMenuById', function() {
        it('should call getcofMenuById successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofMenuById call and complete the assertions
          /*
          var cofMenuId = 789;

          instance.getcofMenuById(cofMenuId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XgeneCloud.CofMenu);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("");
            expect(data.GROUP_ID).to.be.a('string');
            expect(data.GROUP_ID).to.be("");
            expect(data.NAME).to.be.a('string');
            expect(data.NAME).to.be("");
            expect(data.CODE).to.be.a('string');
            expect(data.CODE).to.be("");
            expect(data.DESCRIPTION).to.be.a('string');
            expect(data.DESCRIPTION).to.be("");
            expect(data.CREATE_TIME).to.be.a('string');
            expect(data.CREATE_TIME).to.be("");
            expect(data.UPDATE_TIME).to.be.a('string');
            expect(data.UPDATE_TIME).to.be("");
            expect(data.TENANT_ID).to.be.a('string');
            expect(data.TENANT_ID).to.be("");
            expect(data.PARENT_ID).to.be.a('string');
            expect(data.PARENT_ID).to.be("");
            expect(data.SORT_NO).to.be.a('number');
            expect(data.SORT_NO).to.be(0);
            expect(data.IS_LEAF).to.be.a('number');
            expect(data.IS_LEAF).to.be(0);
            expect(data.TREE_LEVEL).to.be.a('number');
            expect(data.TREE_LEVEL).to.be(0);
            expect(data.SEQ).to.be.a('string');
            expect(data.SEQ).to.be("");
            expect(data.IS_FIXED).to.be.a('number');
            expect(data.IS_FIXED).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getcofMenuCount', function() {
        it('should call getcofMenuCount successfully', function(done) {
          // TODO: uncomment, update parameter values for getcofMenuCount call and complete the assertions
          /*
          var opts = {};
          opts.where = null;

          instance.getcofMenuCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatecofMenu', function() {
        it('should call updatecofMenu successfully', function(done) {
          // TODO: uncomment, update parameter values for updatecofMenu call
          /*
          var cofMenuId = 789;
          var body = new XgeneCloud.CofMenu();
          body.ID = "";
          body.GROUP_ID = "";
          body.NAME = "";
          body.CODE = "";
          body.DESCRIPTION = "";
          body.CREATE_TIME = "";
          body.UPDATE_TIME = "";
          body.TENANT_ID = "";
          body.PARENT_ID = "";
          body.SORT_NO = 0;
          body.IS_LEAF = 0;
          body.TREE_LEVEL = 0;
          body.SEQ = "";
          body.IS_FIXED = 0;

          instance.updatecofMenu(cofMenuId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatecofMenu_0', function() {
        it('should call updatecofMenu_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for updatecofMenu_0 call
          /*
          var body = [new XgeneCloud.CofMenu()];
          body[0].ID = "";
          body[0].GROUP_ID = "";
          body[0].NAME = "";
          body[0].CODE = "";
          body[0].DESCRIPTION = "";
          body[0].CREATE_TIME = "";
          body[0].UPDATE_TIME = "";
          body[0].TENANT_ID = "";
          body[0].PARENT_ID = "";
          body[0].SORT_NO = 0;
          body[0].IS_LEAF = 0;
          body[0].TREE_LEVEL = 0;
          body[0].SEQ = "";
          body[0].IS_FIXED = 0;

          instance.updatecofMenu_0(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
